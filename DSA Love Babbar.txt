-When you start reading/ revising notes, read problem statement properly & think logical,
 if you don't understand the program, prefer try to resolve the problem by yourself.
	01/08/2023
Lecture-1
     -Understand the problem
     -check given data
     -search approach (make flowchart)
     -start programming

     -Flowchart:
          Diagrammatic representation of an approach
          Components:
               1.Terminator: start/end
               2.Parallelogram block   : represent IO/OP 
               3.Rectangular block: represent process
               4.Diamond: decision making (condition)
          e.g., Sum of 2 num:
	-Pseudocode:	Generic way of representing look of code.
	-Flowchart for Simple Interest
		SI = (P*R*T)/100

	-Two colons (::) are used in C++ as a scope resolution operator

	-Flowchart for average of 3 num
		avg = (a+b+c)/3;

	-Greater between 2 num:
		a>b? print(a greater) : print(b greater);

	-Odd or even num:
		(num %2 ==0) ? print(even):print(odd)

	-num is +ve or -ve or zero?
		If(num >0) print(+ve)
		else if (num<0) print(-ve)
		else print(zero)
		
	-Valid triangle or not?
		Angles A, B & C
		A+B > C
		B+C > A
		C+A > B

	-Loops:
		-Print 1 to 5 nums.

		-print even nums from given range (copy paste program directly on compiler to check)

			#include <iostream>
			using namespace std;
			int main() {
				// Write C++ code here
				cout << "Range..!"<<"\n";
				int s=1,e=10,i;
				for(i=s; i<=e; i++){	
					cout<<i<<"\t";
				}
				cout<<"\neven nums.."<<"\n";
				for(i=s;i<e;i++){
					if(i%2==0){
						cout<<i<<endl;
					}else{
						continue;
					}
				}
				cout<<"\nend";
				return 0;
			}

		-Sum of 1 to N nums:
			#include <iostream>
			using namespace std;

			int main() {
				// Write C++ code here
				cout<<"Enter n::";
				int n;
				cin>>n;
				int sum = 0;
				
				// sum = n*(n+1)/2;
				//or
				for(int i=1;i<=n;i++){
					sum = sum +i;
				}
				cout<<"The sum of first "<<n<<" numbers ::"<<sum;
				cout<<"\nend";

				return 0;
			}

		-Factorial:
			#include <iostream>			//using namespace std not used here.
			int main() {
				std::cout<<"Enter n::";
				int n,fact=1;
				std::cin>>n;
				
				for(int i=1;i<=n;i++){
					fact = fact * i;
				}
				std::cout<<"The factorial of "<<n<<" is ::"<<fact;
				std::cout<<"\nend";

				return 0;
			}

		-Prime num:
			#include <iostream>
			int main() {
				// Write C++ code here
				std::cout<<"Enter n to check prime or not::";
				int n;
				std::cin>>n;
				bool flag = true;
				
				if(n == 1){
					std::cout<<"1 is neither prime nor composite";
					return 0;
				}
				
				for(int i=2;i<n;i++){
					if(n % i ==0){
						flag = false;
						break;
					}else{
						flag = true;
					}
				}
				
				if(flag){
					std::cout<<n<<" is Prime num.";
				}else{
					std::cout<<n<<" is not Prime num.";
				}
				
				std::cout<<"\nend";
				return 0;
			}
		
	-Compiler: convert High Level Language to Binary Language (machine understandable)
---------------------------------------------------------------------------------------------------------
	02/08/2023
Lecture-2:
	Compiler:
		-convert program to machine understandable Language ( Binary ).
		-checks the error & let you know.
	
	IDE: Integrated Development Environment
	
	-Program always start from main function.
	eg.
		#include <iostream>
		int main() {
			std::cout << "Hello world!"<<endl;
			return 0;
		}

		//if you used this statement no need to mention std in program
		using namespace std;
		#include <iostream>
		int main() {
			cout << "Hello world!";
			return 0;
		}

		where,
			std 			- is a namespace.
			cout 		- is function for printing
			<< 			- is outputing a output.
			endl  or '\n' 	- end line/ new line.
			; 			- represent end line.
		
	
	-Datatype & Variables:
		1 Byte is 8 bit.
		4bit is 1 nibble.
		int-
			size is 4 byte(32bit) generally (sometimes 2 bytes also, depends on compiler).
			Stores whole numbers, without decimals
			eg.
				int a = 20;

			min size -2³¹
			max size 2³¹-1
		
		char-
			size is 1 byte
			Stores a single character/letter/number, or ASCII values
			eg.
				char ch = 'a';		//valid

				char ch = 'ab';	//invalid
			
			Alternatively, you can use ASCII values to display certain characters:
			eg.
				char a = 65, b = 66, c = 67;
				cout << a;		//A
				cout << b;		//B
				cout << c;		//C

			-ASCII values:	ASCII - 'American Standard Code for Information Interchange'
				32 		is value of space.
				48 to 57 	is for 	0 to 9.
				65 to 90 	is for 	A to Z.
				97 to 122 is for 	a to z.

		boolean-
			1 byte	
			Stores true or false values
			you can keep any value for this boolean if it is non-zero(+ve) or -ve  then its considered as true (1).
				if it is zero then its considered as false(0).
			eg.
				bool a = true;

				bool b = 1,c =true, d = false;
				cout <<b<<endl;         //1
				cout <<c<<endl;         //1
				cout <<d<<endl;         //0
	
		float-
			4 bytes	
			Stores fractional numbers, containing one or more decimals. Sufficient for storing 6-7 decimal digits.
			eg.
				float f1 = 35e3;
				double d1 = 12E4;
				float ff = 35.453f;				//f to represent its is a floating point num.
				double dd = 12.78909d;			//d to represent its is a double
				cout << f1 << "\n";				// 35000
				cout << d1;					// 120000
		
		double-
			8 bytes	
			Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits.
		
		NOTE:
			float vs. double
			The precision of a floating point value indicates how many digits the value can have after the decimal point. 
			The precision of float is only six or seven decimal digits, while double variables have a precision of about 15 digits. 
			Therefore it is safer to use double for most calculations.
		
		string-
			32 byte.
			string type is used to store a sequence of characters (text).
			This is not a built-in type, but it behaves like one in its most basic usage. 
			String values must be surrounded by double quotes:
			eg.
				#include <string>				//including this header file is not mandatory.
				string str  = "Vivek";
				cout << str;
			
		Variable Naming Convention:
			int abc1 = 1;			//valid
			int _abc = 21;			//valid
			int 1abc = -10; 		//invalid because the first character letter/underscore not number

		sizeof:
			eg.
				#include <iostream>

				int main() {
					bool c  = -12;
					int i   = 10;
					char ch = 'A';
					float f =  11.12; 
					double d   = 12.1245d;
					std::string str = "Vivek ";
					
					std::cout<<"The size of "<<c<<" Boolean :: "<<sizeof(c)<<" Byte\n";
					std::cout<<"The size of "<<i<<" integer :: "<<sizeof(i)<<" Byte\n";
					std::cout<<"The size of "<<ch<<" char :: "<<sizeof(ch)<<" Byte\n";
					std::cout<<"The size of "<<f<<" float :: "<<sizeof(f)<<" Byte\n";
					std::cout<<"The size of "<<d<<" double :: "<<sizeof(d)<<" Byte\n";
					std::cout<<"The size of "<<str<<" string :: "<<sizeof(str)<<" Byte\n";
					
					return 0;
				}

				//output
					The size of 1 Boolean :: 1 Byte
					The size of 10 integer :: 4 Byte
					The size of A char :: 1 Byte
					The size of 11.12 float :: 4 Byte
					The size of 12.1245 double :: 8 Byte
					The size of Vivek  string :: 32 Byte

		storing process:
			int is 4 bytes ie. 32 bits.
				4 blocks of bits are made
				eg.
					[-------- -------- -------- --------] this how integer converted to binary & store data in bits format.

		TypeCasting:
			when you assign a value of one primitive data type to another type.
			eg.
				int a = 'a';
				cout<<a;

				char ch = 98;
				cout<<ch;

				-int is 4 byte & char is 1 byte, if we try to store big integer to char
				 warning will be thrown & last 1 byte of data will be store in char.
				 eg.
				 	char ch = 123456		//binary of 123456 = 11110001001000000
					cout<< ch;			//@

					but char is of size 1 byte ie. 8 bits, so last 8 bit of binary 123456 will extracted ie.01000000 
						& rest all bits will be lost
					& if we print the ch then output will be @.
					coz this binary 01000000 is 64 in decimal.
					& 64 is mapped with @ char.
			
			eg.
				include <iostream>

				int main() {
					float f = 45.99f;
					int b = f;
					
					float f1 = b;
					
					std::string str = "1234";
					// int a = int(str);       // this won't work
					int a = stoi(str);       //to convert string to int
					
					std::cout<<a<<std::endl;		//1234
					std::cout<<a+6<<std::endl;	//1240
					
					std::cout<<f<<"\n";		//45.99
					std::cout<<b+2<<"\n";	//47
					std::cout<<f1<<"\n";	//45
					
					return 0;
				}

				#include <iostream>
				int main() {
					std::string str = "450";
					int a;
					std::cout<<str<<std::endl;
					std::cout<<a<<std::endl;
					std::cout<<stoi(str)+10;			string to integer stoi().
					return 0;
				}

		How -ve num stored:
			if first bit is 1, then num is -ve.
			if first bit is 0, then num is +ve.
			eg.
				want to store -8.
				step 1:	
					ignore negative sing(-ve)
					8
				step 2:
					convert 8 to binary format
					1000
					stored as
						[-------- -------- -------- ----1000] rest all are zero only like below,
						[00000000 00000000 00000000 00001000]

				step 3:
					-Take 2's (two's) complement & store.
					 for taking 2's complement first take 1's complement
					 
					 step 1: 
					 	1's complement change 0 to 1 & viceversa.
						[11111111 11111111 11111111 11110111]

					 step 2:
					 	add 1 in 1's complement.
						[11111111 11111111 11111111 11110111]
						+							1
						______________________________________
						[11111111 11111111 11111111 11111000]		
							--here in the answer first bit is 1, so it denotes its -ve num.
							--this is 2s complement of 8
				
				step 4:
					-To print that -ve num then take 2's complement of above output:
						[11111111 11111111 11111111 11111000]		
					
					-1's complement
						[00000000 00000000 00000000 00000111]
						+							1
						_____________________________________
						[00000000 00000000 00000000 00001000]
					
					now print above as its 8, but -ve.

		For +ve num only:
			unsigned int a = 122;
			range:
				0 to 2³²-1;

			if you try to store -ve num then it will generate huge num becoz 
			of most significant bit (first bit) is 1 to represent it is a -ve but,
			you said its +ve by mentioning usigned so compiler treat it as positive & generates huge num.
		
		Operator:
			Unary:
				increment (++)
				decrement (--)
				eg.
					postIncrement/postDecrement means the value will get incremented or decremented after using.
					old value gets used then value gets updated
						a++;		//postIncrement
						a--;		//postDecrement
					
					
					preIncrement/ preDecrement means the value will get incremented or decremented before using.
					value gets incresed or decresed first then it will gets used.
						++a;		//pretIncrement
						--a;		//pretDecrement
					
			Arithmetic:-
				+,-,*,/,%

				int/ int  = int		//if we divide int by int the answer will be integer
				float / int = float		//if we divide float by int the answer will be floating point num.
				double / int = double		//if we divide double by int the answer will be double.

			Relational:- 
				To Check
				== is equal to equal to (double equals to)
				< is less than
				> is greater than
				<= is less than equal to
				>= is greater than equal to
				!= is not equal to
			
			Assignment operator:
				=, +=, *=, -=, /=, %= etc
				eg.
					a = 10;
					a = a + 10;		-->		a += 10;
					a = a * 10;		-->		a *= 10;
					a = a - 10;		-->		a -= 10;
					a = a / 10;		-->		a /= 10;
					a = a % 10;		-->		a %= 10;

			Logical:-
				&& AND operation takes two boolean values and returns True if both are True else False.
				|| OR any one conditions should true for that statement to execute.
				! NOT reverse value.
				eg.
					ignores the sign.
					int a = 0;
						std::cout << !a;		//1
					int b = 1;
						std::cout << !b;		//0
					int c = 10;
						std::cout << !c;		//0
					int d = -10;
						std::cout << !d;		//0
					int e = -0;
						std::cout << !e;		//1

			Ternary Operator:
				syntax:
					(condition) ? [if true execute this] : [if false execute this]	
				eg.
					#include <iostream>
					using namespace std;

					int main() {
						int a = 100;
						
						//ternary operator
						(a>20) ? cout<< a << " Greater Than 20" : cout<< a << "Less than 20";

						return 0;
					}

			Bitwise:-
				& and
				| or
				^ xor
				~ complement of bits in binary representation
				<< left shift
				>> right shift
---------------------------------------------------------------------------------------------------------
	03/08/2023
Lecture-3:
	Conditionals, Loops, Patterns
	1) if Statement
		if(condition){
			//code block executed when condition evaluates as TRUE
		}

	2) if-else Statement
		if(condition){ 
			//This code block will be executed only if 'condition' is evaluated as TRUE
		}
		else{   
			//this block gets executed when if block evaluates to FALSE
		}
		
	3) else-if Statement
		if (cond_A) { 
			//first conditional expression
			/* statements */
		}
		else if (cond_B) {
			//second condtional expression
			/* other statements*/
		}
		else if (cond_C) {
			//third condtional expression
			/* other statements*/
		}
		else {
			/* last statement for default case */
		}
		//else is last default block not mandatory to write.
	
	4) Nested If statements / Nested If-else:
		if-statement inside another if statement

		if(cond){
			//if true
		}else{
			if(nestedCond){ 
				// nested condition code here
			} else{

			}
		}
	
	5) Switch Case Statement
			Why we use switch case instead of if-else?
				Editing in switch statement is easier as compared to the 'if-else' statement. 
				If we remove any of the cases from the switch, then it will not interrupt the execution of other cases. 
				Therefore, we can say that the switch statement is easy to modify and maintain.

				-If we have multiple choices then the
				switch statement is the best option as
				the speed of the execution will be much
				higher than 'if-else'

				-Break keyword:
					The break in C++ is a loop control statement that is used to terminate the loop. 
					As soon as the break statement is encountered from within a loop, 
					the loop iterations stop there and control returns from the loop immediately to the first statement after the loop.
				
				-Continue:
					C++ continue statement is a loop control statement that forces the 
					program control to execute the next iteration of the loop. As a result, 
					the code inside the loop following the continue statement will be 
					skipped and the next iteration of the loop will begin.

			eg.
				#include <iostream>
				using namespace std;

				int main() {
					char oper;
					float num1, num2;
					cout << "Enter an operator (+, -, *, /): ";
					cin >> oper;
					cout << "Enter two numbers: " << endl;
					cin >> num1 >> num2;

					switch (oper) {
						case '+':
							cout << num1 << " + " << num2 << " = " << num1 + num2;
							break;
						case '-':
							cout << num1 << " - " << num2 << " = " << num1 - num2;
							break;
						case '*':
							cout << num1 << " * " << num2 << " = " << num1 * num2;
							break;
						case '/':
							cout << num1 << " / " << num2 << " = " << num1 / num2;
							break;
						default:
							// operator is doesn't match any case constant (+, -, *, /)
							cout << "Error! The operator is not correct";
							break;
					}
					return 0;
				}
			


	6) While Loop:
		while loop require just a num inside as condition it may be -ve or +ve, it will work, 
		except the 0, if zero cames then loop breaks.
		eg.
			while(1)		//works
			while(100)	//works
			while(-23)	//works
			while(5)		//works

			while(0)		//stops this will breaks the loop.
			eg.
				#include <iostream>
				using namespace std;

				int main()
				{
					int i=1, b=-5;
					while(b++){
						std::cout << "say hii" << i++ << std::endl;
						//b++;
					}
					return 0;
				}

	 eg
	 	//WAP TO PRINT THE N NUMS:
			#include <iostream>
			using namespace std;

			int main() {
				int i=1;
				// while(i<11)
				//     cout << i++ <<"\t";
				//or
				
				while(i<11){
					cout << i << end;
					i++;                //i = i + 1
				}
				return 0;
			}

			#include <iostream>
			using namespace std;

			int main() {
				int i=1,n;
				cout << "enter n :: ";
				cin>>n;
				while(i<=n)
					cout << i++ <<"\t";
				//or
				
				//while(i<=n){
				//	cout << i << "\t";
				//	i++;                //i = i + 1
				//}
				return 0;
			}

		//WAP sum of first n num
			#include <iostream>
			using namespace std;

			int main() {
				int n,i=1,sum=0;
				cout << "enter n:: ";
				cin>>n;

				//shorthand
				while(i<=n)
					sum += i++;
				
				// or
				// while(i<=n){
				//     sum = sum + i;       //sum = sum + i
				//     i++;            //i = i +1;
				// }

				cout<< "The sum of "<<n<<" is "<<sum;
				
				return 0;
			}

		//WAP sum of even num
			#include <iostream>
			using namespace std;

			int main() {
				// sum of even num
				int n,i=2;
				cout << "Enter n:: ";
				cin>>n;
				
				int sum =0;
				while(i<=n){
					if(i % 2 == 0)
						sum = sum + i;
					i++;
				}
				
				// or shorhand
				// while(i <= n){
				//     if(i % 2 == 0)
				//         sum += i;
				//     i++;
				// }
					
				cout << "Sum of even till "<< n << " is :: "<< sum;
				
				return 0;
			}

		//WAP to check entered num is prime or not?
			#include <iostream>
			using namespace std;

			int main() {
				//WAP num is prime or not.
				int n,i=2,flag=0;
				cout << "enter num :: ";
				cin>>n;
				
				while(i <= n/2){
					if(n % i == 0){
						flag = 1;
						break;
					}
					i++;
				}
				
				if(flag)
					cout << n << " is not prime";
				else
					cout << n << " is Prime Num";
				
				return 0;
			}
		
		//WAP to print:
			* * * * * * * *
			* * * * * * * *
			* * * * * * * *
			* * * * * * * *
			* * * * * * * *
			->
				#include <iostream>
				int main() {
					int i=1,j=1;
					while(i++ <6){              //shorthands
						while(j++ < 8){         //shorthands for increment
							std::cout << "* ";
							// j++              
						}
						j=1;
						// i++;     
						std::cout<<"\n";
					}
					return 0;
				}
		
		//WAP to take rows & column from user.
			#include <iostream>
			int main() {
				int i=1,j=1,n;
				
				std::cout<<"Enter rows column :: ";
				std::cin>>n;
				
				while(i++ <n){              //shorthands
					while(j++ < n){         //shorthands for increment
						std::cout << "* ";
						// j++              
					}
					j=1;
					// i++;     
					std::cout<<"\n";
				}

				return 0;
			}
		
		//WAP to print this Patterns with custom rows:
		 if rows are 5,
			1 1 1 1 1 
			2 2 2 2 2 
			3 3 3 3 3 
			4 4 4 4 4 
			5 5 5 5 5
		     ->
			#include <iostream>
			int main() {
			
				int z,p,rows;
				std::cout << "Enter num of rows you want :: ";
				std::cin >> rows;
				for(z=1; z<=rows; z++){
					for(p=1; p<=rows; p++)
						std::cout << z << " ";
					std::cout<<std::endl;
				}
				return 0;
			}
			//output:
				Enter num of rows you want :: 8
					1 1 1 1 1 1 1 1 
					2 2 2 2 2 2 2 2 
					3 3 3 3 3 3 3 3 
					4 4 4 4 4 4 4 4 
					5 5 5 5 5 5 5 5 
					6 6 6 6 6 6 6 6 
					7 7 7 7 7 7 7 7 
					8 8 8 8 8 8 8 8

	eg.
		1).WAP to check num is +ve, -ve or zero?
			#include <iostream>
			using namespace std;

			int main() {
				cout<<"Enter value for A::";
				int a;
				cin>>a;
				if(a>0){
					cout<<"A is +ve "<<a;
				}else if(a<0){
					cout<<"A is -ve "<<a;
				}else{
					cout<<"A is Zero "<<a;
				}
				return 0;
			}
			--here cin function takes the input, cin function don't read tabs, space & new line char.

		2).WAP for Greater num
			#include <iostream>
			using namespace std;

			int main() {
				cout << "Enter values of A & B::";
				int a,b;
				cin >> a >> b;						//taking input at same time.
				
				cout << "A :: " << a << " B :: " << b << endl;
				if(a>b)
					cout << "A is Greater than B";
				else if(b > a)
					cout << "B is Greater than A";
				else
					cout << "A is equals to B";
				return 0;
			}

			--if there is one statement in if block then no need to put the { } curly braces

		3). WAP to check char is lowercase or uppercase or digit?
			#include <iostream>
			using namespace std;

			int main() {
				char ch;
				cout<< "Enter char :: ";
				cin>>ch;
				
				if(ch >= 'a' && ch<='z')
					cout << "Char is Lowercase "<<ch;
				else if(ch >= 'A' && ch <= 'Z')
					cout << "Char is Uppercase "<<ch;
				else if(ch >= '0' && ch <= '9')
					cout << "Char is Digit "<<ch;
				else
					cout << "Char is something Strange "<<ch;
				return 0;
			}

		-to take space, new line as input use cin.get() function.
			int a= cin.get();
			cout<<"A :: "<<a;
---------------------------------------------------------------------------------------------------------
	03/08/2023
Lecture-4:
	if 'return 0' is not there at the end still program works.
	Patterns solving
	1)	1 2 3 4 5
		1 2 3 4 5
		1 2 3 4 5
		1 2 3 4 5
		1 2 3 4 5
		->
			#include <iostream>
			using namespace std;

			int main() {
				
				int n,a=1,b=1;
				
				cout << "Enter n:: ";
				cin>>n;
				
				while(a++ <= n){            			//shorthand checking as well as incrementing king as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementingking as well as incrementing
					while(b <= n){          			//for be also you can increment while checking
						cout << b++ << " ";         	//shorthand (printing as well as incrementing)
						// b++;
					}
					b=1;
					// a++; 
					cout<<"\n";
				}

				return 0;
			}

	2)
		n = 5
			5 4 3 2 1
			5 4 3 2 1
			5 4 3 2 1
			5 4 3 2 1
			5 4 3 2 1
		->
			#include <iostream>
			using namespace std;		

			int main() {
			
				int n,a=1,b=1;
				
				cout << "Enter n:: ";
				cin>>n;
				
				while(a++ <= n) {          //shorthand
					while(b <= n){    
						cout << n - b +1<< " ";
						b++;
					}
					b=1;
					// a++;
					cout<<"\n";
				}
				return 0;
			}

	3)
		1	2	3 	4	 5
		6	7 	8 	9	 10
		11	12 	13 	14	 15
		16 	17 	18	19	 20
		21 	22 	23	24	 25
		->
			#include <iostream>
			using namespace std;

			int main() {
				
				int n,a=1,b=1,counter=1;

				cout << "Enter n:: ";
				cin>>n;
				
				while(a++ <= n){          //shorthand
					while(b++ <= n){    //shorthand
						cout<<counter++<<"\t";
						// b++;
					}
					b=1;
					// a++;
					cout<<"\n";
				}
				return 0;
			}
	
	4) Start pattern for custom rows:
		Enter rows:: 5
			* 
			* * 
			* * * 
			* * * * 
			* * * * * 
		->
			#include <iostream>
			using namespace std;

			int main() {
			
				int n,a=1,b=1;
				cout << "Enter rows:: ";
				cin>>n;
				
				while(a <= n){
					while(b++ <= a){      //shorthand 
						cout<< "* ";
						// b++;
					}
					cout<<"\n";
					b=1;
					a++;
				}

				return 0;
			}
	
	5)
		take rows from user:
		 Enter rows:: 5
			1 
			1 2 
			1 2 3 
			1 2 3 4 
			1 2 3 4 5 
		->
			#include <iostream>
			using namespace std;

			int main() {
				int n,a=1,b=1;
				
				cout << "Enter rows:: ";
				cin>>n;
				
				while(a <= n){
					while(b <= a){      
						cout<< b++ <<" ";     //shorthand 
						// b++;
					}
					cout<<"\n";
					b=1;
					a++;
				}
			return 0;
			}
	
	6)
		take rows from user:
		 Enter rows:: 5
			1 
			2 2 
			3 3 3
			4 4 4 4
			5 5 5 5 5
		 ->
		 	#include <iostream>
			using namespace std;

			int main() {
				
				int n,a=1,b=1;
				
				cout << "Enter rows:: ";
				cin>>n;
				
				while(a <= n){
					while(b++ <= a){            //shorthand
						cout<< a <<" ";     
						// b++;
					}
					cout<<"\n";
					b=1;
					a++;
				}

				return 0;
			} 

	7)
		Take rows input from user..
			Enter rows:5
				1	
				2	3	
				4	5	6	
				7	8	9	10	
				11	12	13	14	15	
			->
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1,counter=1;
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){        //shorthand
						while(b++ <= a){                    //shorthand
							cout << counter++ << "\t";      //shorthand
							// counter++;
							// b++;
						}
						b=1;
						a++;
						cout << "\n";
					}
					
					
					return 0;
				}

	8)
		Take user input for rows
			Enter rows:5
			1	
			2	3	
			3	4	5	
			4	5	6	7	
			5	6	7	8	9
		->
			#include <iostream>
			using namespace std;
			int main() {
				int n,a=1,b=1,temp;
				
				cout << "Enter rows:";
				cin>>n;
				
				while(a <= n){
					temp = a;						//need to try without using extra var.
					while(b <= a){
						cout << temp++ << "\t";
						b++;
					}
					cout << "\n";
					a++;
					b=1;      //important step
				}
				return 0;
			}

			//or without using temp.
			#include <iostream>
			using namespace std;
			int main() {
					int n,a=1,b=1;
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						while(b <= a){
							cout << a + b - 1 << "\t";
							b++;
						}
						cout << "\n";
						a++;
						b=1;      //important step
					}
					return 0;
			}
	
	9)
		Take user input for rows
			Enter rows:5
			1
			2 1
			3 2 1
			4 3 2 1
			5 4 3 2 1
			->
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1,temp;
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						temp = a;
						while(b <= a){
							cout << temp-- << "\t";
							b++;
						}
						a++;
						b=1;
						cout << "\n";
					}
					
					return 0;
				}
			
			//or without using that extra temp variable

				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						// temp = a;
						while(b <= a){
							cout << a - b + 1 << "\t";
							b++;
						}
						a++;
						b=1;
						cout << "\n";
					}
					
					return 0;
				}

	10)
		Take user input for rows
			enter rows:3
				A A A
				B B B
				C C C
			->	
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					char ch = 'A';
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a++ <= n){						//shorhand
						while(b++ <= n){					//shorhand
							cout << ch <<" ";
							//b++;
						}
						ch++;
						//a++;
						b=1;
						cout<< "\n";
					}

					//for above while loop short code.
					// 	while(a++ <= n){
					// 	    while(b++ <= n)1
					// 	        cout << ch <<" ";
					// 	    ch++;b=1;
					// 	    cout<< "\n";
					// 	}


					return 0;
				}
			
			//without using that extra char ch variable.
			#include <iostream>
			using namespace std;
			int main() {
				int n,a=1,b=1;
				
				cout << "Enter rows:";
				cin>>n;
				
				//using char function to convert the int to char.
				
				while(a <= n){
					while(b++ <= n)
						cout << char('A' + a - 1) <<" ";

					b=1;
					a++;
					cout<< "\n";
				}
				return 0;
			}
	
	11)
		Take user input for rows
			enter rows: 3
				A B C
				A B C
				A B C
			->
			#include <iostream>
			using namespace std;
			int main() {
				int n,a=1,b=1;
				char ch = 'A';
				
				cout << "Enter rows:";
				cin>>n;
				
				while(a <= n){
					while(b <= n){
						cout << ch << " ";
						b++;
					}
					ch++;
					a++;
					b=1;
					cout << "\n";
				}
				
				return 0;
			}

			//or without using that extra ch
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						while(b <= n){
							
							cout << char(64 + a) << " ";					//ASCII value of A is 65 so we purposefully added 64 before it.
							
							//or
							//cout << char('A' + a - 1) << " ";

							b++;
						}
						a++;
						b=1;
						cout << "\n";
					}
					
					return 0;
				}
		
	12)
		Take user input for rows
			Enter rows:5
			A B C D E 
			F G H I J 
			K L M N O 
			P Q R S T 
			U V W X Y 
			->
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					char ch = 'A';

					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						while(b <= n){
						cout << ch++ << " ";			//shorhand for ch.
							b++;
							//ch++;
						}
						a++;
						b=1;
						cout << endl;
					}
					return 0;
				}

	14)
		Take user input for rows
		Enter rows:5
			A B C D E 
			B C D E F 
			C D E F G 
			D E F G H 
			E F G H I 
		->
			#include <iostream>
			using namespace std;
			int main() {
				int n,a=1,b=1;
				char ch = 'A';

				cout << "Enter rows:";
				cin>>n;
				
				while(a <= n){
					while(b <= n){
					cout << ch++  << " ";
						b++;
						// ch++;
					}
					ch = 'A' + a;
					a++;
					b=1;
					cout << endl;
				}
				return 0;
			}

			//or without using that extra char ch.
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;

					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						while(b <= n){
							cout << char('A' + b - 1 + a - 1) << " ";			//to match the above pattern so we did adjustment.

							//or using ASCII value to print A , for first iteration (63 + 1 + 1 = 65) which is A.
							//cout << char(63 + b + a) << " ";
							b++;
						}
						a++;
						b=1;
						cout << endl;
					}
					return 0;
				}

	15)
		Take user input for rows
		  enter rows: 3
		  	A
			B B
			C C C
			->
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					char ch = 'A';
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						while(b <= a){
						cout << ch << " ";
						b++;
						}
						ch++;
						a++;
						b=1;
						cout << endl;
					}
					return 0;
				}

			//without using ch char.
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						while(b <= a){
							cout << char('A' + a - 1) << " ";

							//or
							//cout << char(64 + a) << " ";

							b++;
						}
						a++;
						b=1;
						cout << endl;
					}
					return 0;
				}

	16)
		Take user input for rows
			Enter rows:5
				A 
				B C 
				D E F 
				G H I J 
				K L M N O 
			->
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					char ch = 'A';
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						while(b++ <= a)				//shorhand for b first checking then incrementing.
							cout << ch++ << " ";
						a++;
						b=1;
						cout << endl;
					}
					return 0;
				}

	17)
		Take user input for rows
			Enter rows:5
				A 
				B C 
				C D E 
				D E F G 
				E F G H I
			->
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						while(b <= a){
							// cout << char('A' - 1 + b + a -1) << " ";
							// or
							cout << char(63 + b + a ) << " ";
							
							b++;
						}
						a++;
						b=1;
						cout << endl;
					}
					return 0;
				}

	18)
		Take user input for rows
			Enter rows:5
				E 
				D D 
				C C C 
				B B B B 
				A A A A A 
			->
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					char ch = 'A';
					
					cout << "Enter rows:";
					cin>>n;
					
					
					while(a <= n){
						while(b <= a){
							cout << char(ch + n - a)<< " ";

							//or without using that char ch.
							//cout << char('A' + n - a)<< " ";

							b++;
						}
						a++;
						b=1;
						cout << "\n";
					}	
					return 0;
				}

	19)
		Take user input for rows
			Enter rows:5
				E 
				D E 
				C D E 
				B C D E 
				A B C D E 
			->
				#include <iostream>
				using namespace std;
				int main() {
					int n,a=1,b=1;
					
					cout << "Enter rows:";
					cin>>n;
					
					while(a <= n){
						while(b <= a){
							cout << char('A' + n - a + b -1) << " ";
							b++;
						}
						a++;
						b=1;
						
						cout << "\n";
					}
					
					return 0;
				}

				//or short
					#include <iostream>
					using namespace std;
					int main() {
						int n,a=1,b=1;
						
						cout << "Enter rows:";
						cin>>n;
						
						while(a <= n){
							while(b <= a)
								cout << char(64 + n - a + b++) << " ";
							a++;b=1;
							cout << "\n";
						}
						return 0;
					}

	20)
		Take user input for rows
			Enter rows: 5
			     *
			    **
			   ***
			  ****
			 *****
			->
			#include <iostream>
			using namespace std;
			int main() {
				int n,a=1,b=1,c,temp;
			
				cout << "Enter rows: ";
				cin >>n;
				c=n;
				
				while(a <= n){  
					temp = c--;                 //shorthand for c
					while(temp >= 1){
						cout << " ";
						temp--;
					}
					// c--;
					while(b <= a){
						cout << "*";
						b++;
					}
					b=1;
					a++;
					cout << "\n";
				}
				return 0;
			}

			//or
			#include <iostream>
			using namespace std;
			int main() {
				int n,a=1,b=1,space;
			
				cout << "Enter rows: ";
				cin >>n;
			
				while(a <= n){
					space = n - a;
					while(space){
						cout << " ";
						space--;
					}
					// c--;
					while(b <= a){
						cout << "*";
						b++;
					}
					b=1;
					a++;
					cout << "\n";
				}
				return 0;			
			}

	21)
			Take user input for rows
				Enter rows: 5
					XXXXX
					XXXX
					XXX
					XX
					X
				->
					#include <iostream>
					using namespace std;
					int main() {
						int n,a=1,b=1;
						
						cout << "Enter rows: ";
						cin >>n;
						b=n;
						
						while(a <= n){
							while(b--){         //b shorthand
								cout << "X";
								// b--;
							}
							b=n-a++;        //a shorthand
							// a++;
							cout << endl;
						}
						return 0;
					}

	22)Take user input for rows
		Enter rows: 5
			* * * * * 
			  * * * * 
			    * * * 
			      * * 
			        * 
		->
		#include <iostream>
		using namespace std;
		int main() {
			int n,a=1,b, space;
			
			cout << "Enter rows: ";
			cin >>n;

			b = n;
			
			while(a <= n){
				space = a - 1;
				while(space--){         //space shorthand
					cout << "  ";
					// space--;
				}
				while(b--){             //b shorthand
					cout << "* ";
					// b--;
				}
				
				b= n - a;
				a++;
				cout << "\n";
			}
			return 0;
		}

	23)Take user input for rows
		Enter rows: 5
			1 1 1 1 1 
			  2 2 2 2 
			    3 3 3 
			      4 4 
			        5 
		->
			#include <iostream>
			using namespace std;
			int main() {
				int n,a=1,b, space;
				cout << "Enter rows: ";
				cin >>n;
				b = n;
				
				while(a <= n){
					space = a - 1;
					while(space--){         //space shorthand
						cout << "  ";
						// space--;
					}
					while(b--){             //b shorthand
						cout << a <<" ";
						// b--;
					}
					
					b= n - a;
					a++;
					cout << "\n";
				}	
				return 0;
			}

	24)Take user input for rows
		Enter rows:5
						1
					2	2
				3	3	3
			4   	4	4	4
		5  	5	5	5	5
	 ->
	 	#include <iostream>
		using namespace std;

		int main()
		{
			int n,i=1,j=1,space;
			
			cout << "Enter rows: ";
			cin >> n;
			
			space = n-1;
			
			while(i <= n){
				while(space--){                 //shorthand for space 
					cout << "  ";
					// space--;
				}
				
				while(j++ <= i){                //shorthand for j
					cout << i << " ";
					// j++;
				}
				i++;
				j = 1;
				
				space = n - i;          //important step.
				
				cout << "\n";
			}

			return 0;
		}

	25)Take user input for rows
	 Enter rows:4
		1 2 3 4
		  2 3 4
		    3 4
		      4
	 ->
	 	#include <iostream>
		using namespace std;

		int main()
		{
			int n,i=1,j=1,space;
			
			cout << "Enter rows: ";
			cin >> n;
			
			while(i <= n){
				
				//spacing
				space = 1;
				while(space < i){
					cout << "  ";
					space++;
				}
				
				//printing num
				while(j <= n){
					cout << j << " " ;
					j++;
				}
				cout << "\n";
				i++;
				j=i;            //important step
			}
			return 0;
		}

	26)Take user input for rows
	    Enter rows:4
					1
				2	3
			4	5	6
		7	8	9	10
	   ->
	   	#include <iostream>
		using namespace std;

		int main()
		{
			int n,i=1,j=1,counter=1,space;
			
			cout << "Enter rows: ";
			cin >> n;
			
			while(i <= n){	
				//spacing
				space = n - i;
				while(space--){		//shorhand for space
					cout << "\t";
				}
				
				while(j <= i){
					cout << counter++ << "\t";
					j++;
				}
				i++;
				cout << "\n";
				j=1;
			}	
			return 0;
		}

	27)Take user input for rows
		Enter rows:4

						1
					1	2	1
				1	2	3	2	1
			1	2	3	4	3	2	1
		->
			#include <iostream>
			using namespace std;

			int main()
			{
				int n, i=1, j=1, k=1, space;
				cout << "Enter rows: ";
				cin >> n;
				space = n;
				
				while(i <= n){
					
					//for space
					while(space--) {
						cout << "  ";
					}
					
					space = n - i;
					
					while(j <= i){
						cout << j << " ";
						j++;
					}
					
					while(k < i){
						cout << i - k << " ";
						k++;
					}
					
					cout<<endl;
					k=1;
					j=1;
					i++;
				}				
				return 0;
			}

	28)Take user input for rows
		Enter rows:5
		1	2	3	4	5	5	4	3	2	1
		1	2	3	4	*	*	4	3	2	1
		1	2	3	*	*	*	*	3	2	1
		1	2	*	*	*	*	*	*	2	1
		1	*	*	*	*	*	*	*	*	1
		->
			#include <iostream>
			using namespace std;

			int main()
			{
				int n, i=1, j=1, space=1;
				
				cout << "Enter rows: ";
				cin >> n;
				
				while(i <= n){
					
					//start looping
					while(j <= n-i+1){              //important step
						cout << j  << " "; 
						j++;
					}
					
					//spacing
					while(space < i){
						cout << "* * ";
						space++;
					}
					
					//reverse loop
					while(--j){
						cout << j << " ";
					}
					
					//resetting the values
					j=1;
					space=1;
					
					cout << endl;
					i++;
				}
				return 0;
			}
			//output
				Enter rows: 5
					1 2 3 4 5 5 4 3 2 1 
					1 2 3 4 * * 4 3 2 1 
					1 2 3 * * * * 3 2 1 
					1 2 * * * * * * 2 1 
					1 * * * * * * * * 1 

	29) pyramid start pattern:
		Enter rows: 5
 			    * 
 			   * * 
 			  * * * 
 			 * * * * 
 			* * * * *
		->

			#include <iostream>
			using namespace std;

			int main()
			{
				int n, i=1, j=1, space;
				cout << "Enter rows: ";
				cin >> n;
				space = n;
				
				while(i <= n){
					
					//for space
					while(space--){
						cout << " ";
					}
					
					space = n - i;
					
					while(j <= i){
						cout << "* ";
						j++;
					}
					cout<<endl;
					j=1;
					i++;
				}
				return 0;
			}
---------------------------------------------------------------------------------------------------------
	04/08/2023
Lecture-5:
	Bitwise Operators, For Loops, Operator Precedence & Variable Scoping
	-Bitwise Operator
		This operator will work on BIT level.
			1). AND (&)
			2). OR (|)
			3). NOT (~)
			4). XOR (^)
		
		Let’s look at the truth table of the bitwise operators
			  Operator	Description				Example
				&		Bitwise AND	 			a & b
				|		Bitwise OR	 			a | b
				^		Bitwise XOR	 			a ^ b
				~		Bitwise NOT (Complement)		  ~a
				<<		Bitwise Left Shift			a << n
				>>		Bitwise Right Shift			a >> n


		Table:
			+-------+-------+-------+--------+-------+-------+--------+--------+
			|   a   |   b   | a & b | (a | b)| a ^ b |   ~a  | a << 1 | a >> 1 |
			+-------+-------+-------+--------+-------+-------+--------+--------+
			|   0   |   0   |   0   |   0    |   0   |   1   |   0    |   0    |
			|   0   |   1   |   0   |   1    |   1   |   1   |   0    |   0    |
			|   1   |   0   |   0   |   1    |   1   |   0   |   2    |   0    |
			|   1   |   1   |   1   |   1    |   0   |   0   |   2    |   0    |
			+-------+-------+-------+--------+-------+-------+--------+--------+


		eg.
			#include <iostream>
			#include <bitset>
			using namespace std;

			int main() {
				// Bitwise AND (&)
				int a = 12;  // 1100 in binary
				int b = 25;  // 11001 in binary
				int result_and = a & b;
				cout << "Bitwise AND: " << result_and << " (" << bitset<8>(result_and) << ")" << endl;  // Output: 8 (00001000)

				// Bitwise OR (|)
				int result_or = a | b;
				cout << "Bitwise OR: " << result_or << " (" << bitset<8>(result_or) << ")" << endl;  // Output: 29 (00011101)

				// Bitwise XOR (^)
				int result_xor = a ^ b;
				cout << "Bitwise XOR: " << result_xor << " (" << bitset<8>(result_xor) << ")" << endl;  // Output: 21 (00010101)

				// Bitwise NOT (~)
				int result_not = ~a;
				cout << "Bitwise NOT: " << result_not << " (" << bitset<8>(result_not) << ")" << endl;  // Output: -13 (11110011)

				// Bitwise Left Shift (<<)
				int n_left = 2;
				int result_left = a << n_left;
				cout << "Bitwise Left Shift: " << result_left << " (" << bitset<8>(result_left) << ")" << endl;  // Output: 48 (00110000)

				// Bitwise Right Shift (>>)
				int n_right = 2;
				int result_right = a >> n_right;
				cout << "Bitwise Right Shift: " << result_right << " (" << bitset<8>(result_right) << ")" << endl;  // Output: 3 (00000011)

				return 0;
			}
		
			Practice:
				#include <iostream>
				using namespace std;

				int main()
				{
					int a=4,b=6;
					
					cout<<"A&B "<< (a&b) << endl;           //4
					cout << "A|B "<< (a|b) << endl;         //6
					cout << "A^B "<< (a^b) << endl;         //2
					cout << "~A "<< (~a) << endl;           //-5
					
					//~a --> 32 bit
						// 4 ==> [-------- -------- -------- -----100] all bits are zero 
						// ~a ==> [11111111 11111111 11111111 11111011]    reverse of above 
						
						// from first bit you can say that it's -ve num.
						//     so before to print take its 2's complement
						//     1's complement [-------- -------- -------- -----100] adding + 1 in it.
						//     ==> [-------- -------- -------- -----101]
							//this above binary in decimal is 5 so ans is -5.
					return 0;
				}
		
		-Left shift:
			syntax.
				var << num;
			eg.
				5 << 1		ie.		101 after shifting 1 bit to left 1010, so 1010 is 10.
				3 << 2         ie. 		011 after shifting 2 bit to left 1100 so its 12.

		-NOTE: here you can see when we use left shift it will get multiplied by 2 in most cases.
				but BE CAREFULL SOMETIME IT WILL GENERATE AN -VE NUM ALSO, WHEN NUM IS TOO LARGE,
				SO, ITS NOT LIKE THAT WHEN WE DO LEFT SHIFT THEN IT'LL GET MULTIPLIED BY 2.
			
		-Right Shift:
			syntax.
				var >> num;
			eg.
				15 >> 1;			ie. right shift by 1 bit.
				
				5 >> 2;			ie. right shift by 2 bit,
								101 >> 2 -->	001 its 1.

				5/2 = 2 ------- pass 1
				2/2 = 1 ------- pass 2	
				so 5 >> 2 => 1
		
		NOTE: 
			either it is a left shift(<<) or right shift(>>) to any +VE NUM, 
			then num of bits padded with zero(0). (means zero will get added after shifting).

			else if the num is -ve then padding will depends on compiler
		
		eg.
			int a=1,b=2;

			if(a-- >0 && ++b > 2)				//it will check for b also cause && require all condition must be true
				cout<<"if";
			else
				cout<<"else";
			
			cout<<endl<<a<<" "<<b;		//0 3 
		
			//OR
			int a=1,b=2;
			if(a-- >0 || ++b > 2)				//it will check for a only, cause one condition needs to be true,
				cout<<"if";					//so if first condition is true then control don't go for next condition & 
			else								//b won't get incremented also. check output
				cout<<"else";
			
			cout<<endl<<a<<" "<<b;		//0 2
		
	-For Loop:
		flow:
			once we visit initialization part, 
			then for next all iteration we just check the condition & updation value.

		for(initialize; condition; increment/ decrement){
			//statement
		}
		//or
		for(;;){
				
		}
		eg.
			for(int i=1; i<=5; i++){
				cout << i;
			}
			//or

			int i = 1;
			for(;;){
				if(i<=n){
					cout << i++ ;
				}else{
					break;
				}
			}

			//multiple
			for(int a=0, b=1; a>=0, b>=1; a--, b--)
				cout<<a<<" "<<b<<endl;

			for(int a=0, b=1; a>=0 && b>=1; a--, b--)
				cout<<a<<" "<<b<<endl;
		
		1). WAP Sum of n
			#include <iostream>
			using namespace std;

			int main()
			{
				int n, sum=0;
				cout << "enter n ";
				cin>>n;
				for(int i =1; i<=n; i++)
					sum += i;
					
				std::cout <<"The sum of "<<n<<" num is "<<sum << std::endl;
				
				return 0;
			}
		
		2). WAP for Fibonacci series
			#include <iostream>
			using namespace std;

			int main()
			{
				int n,prev=0, cur=1,temp;
				cout << "enter n ";
				cin>>n;
				
				for(int i =1; i<=n; i++){
					
					cout << prev << " ";
					
					temp = cur + prev;
					prev = cur;
					cur = temp;
					
				}
					
				return 0;
			}
		
		3). check entered num is Prime num or not?
			#include <iostream>
			using namespace std;

			int main()
			{
				int n;
				cout << "Enter num : ";
				cin >> n;
				
				bool PRM = true;
				
				for(int i=2; i < n/2; i++)
					if(n % i == 0){
						PRM = false;
						break;
					}
				
				if(PRM)
					cout << n << " is prime num.";
				else
					cout << n << " is not prime num.";
				
				cout << endl << "END";
				return 0;
			}
		
		4). Print all prime nums between given range
			#include <iostream>
			using namespace std;

			int main()
			{
				int startNum, endNum;
				
				std::cout << "Enter Range to print all Prime nums in-between : " << std::endl;
				
				std::cout << "Enter Starting num :: ";
				std::cin >> startNum;
				
				std::cout << "Enter Ending num :: ";
				std::cin >> endNum;
				
				std::cout << "Prime nums in-between given range :: " << std::endl;
					
				for(int i = startNum; i <= endNum; i++){
					
					bool PRM = true;
					
					if( i == 1){
						std::cout << "1 neither prime nor composite" << std::endl;
						continue;
					}
					
					for(int j=2; j <= i/2; j++)
						if(i % j == 0){
							PRM = false;
							break;
						}
					
					if(PRM)
						std::cout << i << " is Prime num." << std::endl;
					else{
						// std::cout << i << " is not Prime num." << std::endl;
						continue;
					}
				}
				
				cout << endl << "END";
				return 0;
			}

		5). 

	-Variable & Scope:
		-You can't create same variable within single block.
		eg.
			#include <iostream>
			int main()
			{    
				int a =10;
				std::cout << a << std::endl;                //10
				
				if(true){
					std::cout <<"inside if before creating "<< a << std::endl;          //10
					int a = 89, b = 77;
					std::cout <<"inside if after creating "<< a << std::endl;           //89
					std::cout << "b = "<< b << std::endl;
				}
				
				// std::cout << "b" <<b<< std::endl;                       //you cant access b outside if block
				std::cout << "Outside if : "<< a << std::endl;          //10
				
				int i=1;
				for(int i= 5;i<=5;i++)
					std::cout << "HII" << std::endl;
					
				//below code works fine.
				if(1){
					int b;
					
					if(1){
						int b;
						
						if(1){
							int b;
							
							if(1){
								int b;
							}
						}
					}
				}
				std::cout << std::endl << "END";
				return 0;
			}

	-Operator Precedence:
		BODMAS
			-Brackets
			-Orders (Exponents and Roots): 
				Evaluate exponents and roots next. This includes calculations involving powers (^) and square roots (√).
			D - Division
			M - Multiplication
			A - Addition
			S - Subtraction
		
	-Practice:
		1].WAP print the difference of product & sum of given num.
		
			#include <iostream>
			using namespace std;

			int main()
			{
				int num;
				cout << "Enter num ";
				cin >> num;
				
				int sum =0 , prod=1;
				
				while(num > 0){
					int temp = num % 10;
					
					sum = sum + temp;
					prod = prod * temp;
					
					num = num / 10;
				}
				
				std::cout << "SUM "<< sum << std::endl;
				std::cout << "Product "<< prod << std::endl;
				std::cout << "Product - SUM "<< prod-sum << std::endl;
				
				cout << "END";
				return 0;
			}

		2]. WAP to count  Number of 1 Bits in given num:
			#include <iostream>
			using namespace std;

			int main()
			{
				int count =0,n=123;
				while(n > 0){
					if(n & 1){
						c++;
					}
					n >>= 1;
				}
				cout << "no.of 1 bit " <<count;
			}
		
		3]. Reverse integer

			int reverse(int n) {
				int rev = 0;
				while(n){
					if( rev > INT_MAX/10 || rev < INT_MIN/10)   return 0;		//if crossing the limit then return 0.
					rev = (rev * 10) +  n % 10;
					n /= 10;
				}
				return rev;
			}

			#include <iostream>
				using namespace std;
				int main()
				{
					int rev = 0, n;
					
					cin>>n; //123

						while(n > 0){
							int lastDigit = (n % 10);
							rev = rev * 10 + lastDigit;
							n /= 10;
						}
						cout << rev;
					return 0;
				}

			int reverse(int x) {
				int rev = 0, n = abs(x);				//abs() it convert num -ve to +ve, & +ve is +ve only. 

				while(n > 0){
					rev += (n % 10);
					
					if(n > 10){
						rev *= 10;
					}
					
					n /= 10;
				}
				if(x <0 )
					return -rev;
	
				return rev;
			}

			//using do-while loop.
			#include <iostream>
				using namespace std;

				int main()
				{
					int n;
					std::cout << "enter n:" << std::endl;
					cin>> n;
					int rev =0;
					
					do{
						rev = (n % 10) + rev * 10;
					}while(n /=10);
					
					cout<<"The Reverse "<< rev;
					return 0;
				}
	
		4]. WAP to find entered num is even or odd.
			#include <iostream>
			using namespace std;
				int main()
				{
					//check num is Even or odd..
					int num;
					cout << "Enter num :";
					cin >> num;
					
					if( num % 2 == 0)
						cout << num << " is Even." <<endl;
					else
						cout << num << " is Odd." <<endl;

					//or
					//(num % 2 == 0)? std::cout << num << " is Even" : cout << num << " is odd";


					return 0;
				}

			//or without using modulo operator,
				cout << (num & 1 == 1); 
				-This part is attempting to check whether the least significant bit (LSB) of num is 1. 
				However, the code is not written correctly for this purpose.
				The issue lies in operator precedence. 
				The equality operator (==) has higher precedence than the bitwise AND operator (&). 
				So, the expression is evaluated like this:
					(num & (1 == 1))
				
				To fix this issue add parentheses,
					cout << ((num & 1) == 1);
				#include <iostream>
				using namespace std;

				int main()
				{
					//check num is Even or odd..
					int num;
					cout << "Enter num :";
					cin >> num;
					
					((num & 1) == 1) ? printf("%d is Odd num",num) : printf("%d is Even num.",num);

					//or
					//((num & 1) == 0) ? printf("%d is Even num.",num) : printf("%d is Odd num",num) ;
	
					return 0;
				}

			//or
				first division then multiply, it because of rounding in integer,
				#include <iostream>
				using namespace std;
				int main() {
					int num;
					std::cout << "Enter num: ";
					std::cin >> num;

					if((num / 2) * 2 == num)
						cout << "even"<<std::endl;
					else
						cout << "Odd"<<std::endl;
						
					std::cout << "End" ;
					return 0;
				}
---------------------------------------------------------------------------------------------------------
	05/08/23
Lecture-6:
	Binary & Decimal Num System
		1) Decimal to Binary
			-divide by 2.
			-Store remainder
			-repeat above 2 step until n != 0.
			-at last reverse the answer
			eg.
				5 -> 101
				7 -> 111
			->
				#include <iostream>
				#include <math.h>
				using namespace std;

				int main()
				{
					int num, i=0;
					std::cout << "Enter num :" << std::endl;
					cin>>num;
					
					int binaryForm = 0;
					cout << "Binary of " << num << " is ";
					
					while(num){
						int bit = num & 1;
						
						binaryForm = (bit * pow(10,i++)) + binaryForm;
						
						num >>= 1;          //num = num >> 1;
					}
					std::cout << binaryForm <<std::endl;	
					return 0;
				}
			
			eg. to keep same sequence of num.
				#include <iostream>
				#include <math.h>
				using namespace std;

				int main()
				{
					int a = 203,b=0,last,i=0;
					
					std::cout << a << std::endl;
					
					while(a){
						last = a % 10;
						b = b + last* pow(10,i++);
						a /=10;
					}

					cout<<b;
					return 0;
				}

			//Homework -ve num to binary
				->

		2) Binary to Decimal
			-multiply by 2's power to that numbers binary bit
			-if that bit is 1, then consider 2's power else ignore
			-last add all 2's power

				1 -> 1011

				=(2⁰ * 1) + (2¹ * 1) + (2² * 0) + (2³ * 1)
				=1+2+0+8
				=11.
			->
				#include <iostream>
				#include <math.h>
				using namespace std;

				int main()
				{
					int num,i=0;
					std::cout << "Enter num in binary : " << std::endl;
					cin>>num;            //1010
					
					int deci=0;

					//using while loop
					while(num){
						
						if(num % 10 == 1)					//if(num%10)
							deci = pow(2,i) + deci;
						i++; 
						num /= 10;
					}
					
					//or using do-while loop
					//do{
					//	if(num % 10 == 1)				//if(num%10)
					//		deci = pow(2,i) + deci;
					//	i++;
					//}while(num /=10);

					cout << "The Decimal num is :: "<<deci;
					return 0;
				}
		
		#Bitset:
			#include <bitset>
			#include <iostream>

			int main() {
				std::bitset<5> bits; // Creates a bitset with 5 bits, initialized to all zeros
				
				bits[2] = 1; // Set the third bit to 1
				std::cout << "Bitset value: " << bits << std::endl; // Output: 00100
				
				return 0;
			}

		eg.
			#include <bitset>
			std::bitset<8> bits; // Creates a bitset with 8 bits, initialized to all zeros
			std::bitset<8> anotherBits("10101010"); // Initializes the bitset with the given binary string

			std::bitset<32> thirtyTwoBits;   // Creates a bitset with 32 bits
			std::bitset<64> sixtyFourBits;   // Creates a bitset with 64 bits
			std::bitset<128> oneTwentyEightBits; // Creates a bitset with 128 bits
		eg.
			it's okay to define a std::bitset<8> and initialize it with a binary string that has fewer than 8 characters. 
			The missing bits will be implicitly set to 0. In your example, std::bitset<8> anotherBits("101"), 
			since the binary string "101" has only 3 characters, the remaining 5 bits will be set to 0, 
			resulting in a bitset equivalent to "00000101".

			#include <bitset>
			#include <iostream>

			int main() {
				std::bitset<8> anotherBits("101"); // Initializes the bitset with "101"

				std::cout << "Bitset value: " << anotherBits << std::endl; // Output: 00000101

				//printing any binary num
					int n;
					cin>>n;
					std::cout << "n "<< bitset<8>(n) << std::endl;
   				
				return 0;
			}
				In this example, the std::bitset<8> is initialized with the binary string "101", 
				which fills the lower three bits. The remaining bits are automatically set to 0, 
				resulting in the bitset value "00000101".
---------------------------------------------------------------------------------------------------------
	06/08/23
Lecture-7:
	LeetCode Problem Solving Session
	eg.
		max/min int printing:
			#include<climits>				
				cout<<INT_MIN;				//minimum value of int stored in INT_MIN
				cout<<INT_MAX;				//maximum value of int stored in INT_MAX

	Practice:
		1]. Complement of base 10 integer
			5 -> 101
			complement -> 010
			which is 2 in decimal

			7 -> 111
			complement -> 000
			which is 0 in decimal

			#include <iostream>
				#include<bitset>
				using namespace std;

				int main()
				{
					
					int n;
					cin>>n;
					
					if(!n){                                 //if(n == 0)
						cout << "new num "<< !n;            //cout << "new num "<< 1;
						return 0;
					}
					
					int temp = n, mask=0;
					
					while(temp){
						mask <<= 1;              //mask = mask << 1;
						mask |= 1;               //mask = mask | 1;
						temp >>=1;               //temp =  temp >> 1;
					}
					
					n = (~n) & mask;
					
					cout << "new num "<<n;
					
					return 0;
				}

			LeetCode:
				int bitwiseComplement(int n) {

					if(!n){
						return !n;
					}

					int temp = n,mask=0;

					while(temp){
						mask <<=1;
						mask |= 1;
						temp >>= 1;
					}

					n = (~n) & mask;
					return n;
				}

		2]. Given num is representation of power of 2.	(hint if no.of setbits = 1 then that num is power of 2)
			#include <iostream>
				#include <math.h>
				using namespace std;

				int main()
				{
					int n,i=0;
					cin>>n;
					
					while(n >=1){
						int temp = pow(2,i++);
						if(n == temp){
							std::cout << "TRUE" << std::endl;
							return 0;
						}
						
						if(temp > n)
						{
							cout <<"FALSE";
							return 0;
						}
					}
					cout << "FALSE";
					return 0;
				}
				//or
					int main()
					{
						int a;
						
						std::cout << "Enter num " << std::endl;
						cin>>a;
						
						for(int i=0; ;i++){
							int temp = pow(2,i);
							if(temp == a){
								std::cout << "Yes power of 2" << std::endl;
								break;
							}
							
							if(temp > a){
								std::cout << "No it's not power of 2" << std::endl;
								break;
							}
						}
						
						std::cout << "END" << std::endl;
						return 0;
					}

			LeetCode:
				bool isPowerOfTwo(int n) {
					int temp=1;					
					while(n>=1){
						if(n == temp)
							return true;
						
						if(temp > n)
							return false;

						temp = temp * 2;
					}
					return false;
				}	

				//or
				if(n==0) return false;
				while(n%2==0) n/=2;
				return n==1;	
---------------------------------------------------------------------------------------------------------
	07/08/23
Lecture-8:
	Switch case & functions:
		syntax.
			switch(condition){
				case value_1 :
					//statement block ;
					break;
					
				case value_2:
					//statement block ;
					break;

				case value_3:
					//statement block;
					break;

				default:
					//statement block ;
			}
			--here for above case no need to use break after default, coz default is at the last of switch case,
				so it will automatically go out of switch case and continue with next line.

			--in place of condition in switch case [switch(condition)], you can keep integer or character value,
				but not float / string value.
				you can keep expression also, like	
				switch(a+b*10)		which generates an constant value.
				
			
			--default case is not mandatory, if its there in code then GOOD, if its not then NO WORRIES.
			--default case is better to keep at last,
		->		
			Include break after default: 
				If you want the switch statement to exit immediately after the default case is executed, 
				you should include a break statement. This prevents the program from continuing to execute 
				code in other case blocks that come after the default case.
				switch(condition){
					case value_1 :
						//statement block ;
						break;
						
					case value_2:
						//statement block ;
						break;

					default:
						//statement block ;
						break;
					
					case value_3:
						//statement block;
						break;
				}

				--if the code is like this above then better to keep the break after default, if you don't 
					write break; after default, then it'll continues to executes the next cases which are after default.

				Nested switch:
					switch(condition){
						case value_1 :
							//statement block ;
							break;
							
						case value_2:
							switch(condition){
									case value_1 :
										//statement block ;
										break;
										
									case value_2:
										//statement block ;
										break;

									default:
										//statement block ;
										break;
									
									case value_3:
										//statement block;
										break;
								}
							break;

						default:
							//statement block ;
							break;
						
						case value_3:
							//statement block;
							break;
					}
		
		eg.
			#include <iostream>
			using namespace std;

			int main()
			{
				int num = 1;
				char ch = '1';
				switch(ch){
					case '2':
						std::cout << "2nd Character" << std::endl;
						break;
						
					case '3':
						std::cout << "3rd Character" << std::endl;
						break;
						
					case '1':
						switch(num){
							case 1:
								std::cout << "1st Character Nested switch" << std::endl;
								break;
						}
						break;
						
					default:
						std::cout << "Default case" << std::endl;
				}
				return 0;
			}
			//output : 1st Character Nested switch

		-Function exit(0)
			--used to come out from infinite loop if we got stuck, without using break. 
			--The most common convention is to use exit(0) to indicate successful execution.
			--and exit(1) (or any non-zero value) to indicate an error or abnormal termination.

			#include <iostream>
			#include <stdlib.h>
			using namespace std;

			int main()
			{
				int num = 1;
				
				while(1){
					std::cout << num << std::endl;
					if(num > 10)
						exit(0);
					num++;
				}
			return 0;
			}
		
		Practice:
			#include <iostream>
				using namespace std;

				int main()
				{
					int a,b;
					char Op;
					
					std::cout << "Enter A :: ";
					std::cin >> a;
					std::cout << "Enter B :: ";
					cin>>b;
					
					cout<<"Enter Operation want to perform: ";
					cin>>Op;
					
					switch(Op){
						case '+':
							{
								std::cout << "Addition: " <<a+b << std::endl;				//you can use Brackets for cases also.
								break;
							}
							
						case '*':
							{
								std::cout <<  "Multiplication: " << a*b << std::endl;
							}
							break;
						
						case '-':
							std::cout <<  "Subtraction: " <<  a-b << std::endl;
							break;
						
						case '/':
							std::cout <<   "Division: " << a/b << std::endl;
							break;
						
						case '%':
							std::cout <<  "Remainder: " <<  a%b << std::endl;
							break;
						default:
							cout << "Not Matching Operation.\n";
					}
					
					std::cout << "END" << std::endl;
					return 0;
				}

			#include <iostream>
				using namespace std;

				int main()
				{
					int num;
					std::cout << "Enter Num : " << std::endl;
					cin >>num;
					
					switch(1){
						
					}
					int temp = num;
					//1234      =12
					
					std::cout << "you need "<< num/ 100 << " 100 notes" << std::endl;        //12
					num -= (num/100) * 100;                     //1234-1200 = 34
					
					std::cout << "you need "<< num / 50 << " 50 notes" << std::endl;         //0
					num -= (num/50) * 50;                                               //34
					
					std::cout << "you need "<<num/20 << " 20 notes" << std::endl;        //1
					num -= (num/20) * 20;                                           //34-20 =14
					
					std::cout << "you need "<< num/10 << " 10 notes" << std::endl;       //1
					num -= (num/10) * 10;                                       //14-10=4
					
					std::cout << "you need "<< num/1 << " 1 coins" << std::endl;       //4
					num = num;

					std::cout << "For "<<temp<<" Amout." << std::endl;
					
					std::cout << "END" << std::endl;
					return 0;
				}	

		Functions:
			A function is a block of code that performs a specific task.
			Suppose we need to create a program to create a circle and color it. We can create two functions to solve this problem:

				a function to draw the circle
				a function to color the circle
			Dividing a complex problem into smaller chunks makes our program easy to understand and reusable.

			There are two types of function:
				Standard Library Functions: Predefined in C++
				User-defined Function: Created by users 
			
			syntax to declare a function is:

				returnType functionName (parameter1, parameter2,...) {
					// function body   
				}

				Here's an example of a function declaration.
				
				// function declaration
				void greet() {
					cout << "Hello World";
				}

				Here,
					the name of the function is greet()
					the return type of the function is void
					the empty parentheses mean it doesn't have any parameters
					the function body is written inside {}
				
				Calling a Function
					In the above program, we have declared a function named greet(). 
					To use the greet() function, we need to call it.
					Here's how we can call the above greet() function.
						greet();
			eg.
				Power of n, pow(a,b);
					#include <iostream>
					using namespace std;

					int power(int, int);            //function declaration,because after main function
											//we are giving the function definition
					int main()
					{
						int a,b;
						std::cout << "Enter a, b :: " << std::endl;
						std::cin >> a>>b;
						
						int ans = power(a,b);
						
						cout<<"Power "<<ans;
						
						return 0;
					}

						int power(int a, int b){

							if(a == 0)                  //if(!a)
								return 0;       
							
							int t=a;
							while(--b){
								a = a * t;
							}
							return a;
						}

				Even Odd function:
					#include <iostream>
					using namespace std;

					bool isEven(int);        //function declaration

					int main()
					{
						int a;
						std::cout << "Enter a ";
						cin >> a;
						
						// (a&1)?cout<<"Odd":cout<<"Even";      
						//or
						
						isEven(a)?cout<<" Even": cout<< " Odd";         //using function
						
						return 0;
					}

						bool isEven(int num){
							if(num % 2 ==0)
								return 1;
							return 0;
						}

				nCr= n!/(r!* (n-r)!)
					#include <iostream>
					using namespace std;

					int fact(int);
					int nCr(int, int); 	          //function declaration  its not required if 
											//we defined function before main function
											//but here we are giving the function definition after main function.
					int main()
					{
						int n,r;
						cout<<"Enter n & r :: ";
						cin>>n>>r;
						
						cout<<n<<"C"<<r<<" = "<< nCr(n,r);
						return 0;
					}

						int nCr(int a, int b){
						
						int NMR = fact(a);                  //numerator
						
						int DNMR = fact(b) * fact(a-b);                     //denominator
						
						return NMR/DNMR;
					}

					int fact(int num){
					
						if(num == 0)
							return 1;
						int t = num;
						
						for(int i=1; i<t; i++)
							num *= i;                               //num = num * i;

						return num;
					}

				Printcouting:
					//void function returns nothing, 

					#include <iostream>
					using namespace std;

					// void printCouting(int);             //function declaration no need here coz 
												//we defined the function with its definition here.

					void printCouting(int c){
					for(int i=1;i<=c;i++)
						std::cout << i << std::endl;
					}

					int main()
					{
						int n;
						cin>>n;
						
						printCouting(n);
						
						std::cout << "END" << std::endl;
						return 0;
					}

				isPrime:
					#include <iostream>
					using namespace std;

					bool isPrime(int num){
						for(int i=2; i<= num/2; i++)
							if(num % i == 0)
								return 1;
						
						return 0;
					}

					int main()
					{
						
						int n;
						cin>>n;
						
						isPrime(n)? cout<<"NO "<<n<<" is NOT Prime num" :cout<<"Yes "<<n<<" is Prime num"; 

						return 0;
					}

				NOTE:
					You can use return in void returnType function without specifying any number;
					eg.
						This is OK.
						void isPrime(int num){
								for(int i=2; i<= num; i++)
									cout<<i;							
								return ;
							}
						
						This is not OK.
							void isPrime(int num){
								for(int i=2; i<= num; i++)
									cout<<i;
								
								return 0;						//here return 0, void doesn't return anything will generate error.
							}

			function calling stack:
				FILO	: First in Last out
			
			-Parameter/ argument:
				Formal Parameter:
					-A variable and its type as they appear in the prototype of the function or method.
					-Formal parameters are declared in the function signature and 
					 act as placeholders for values that the function will receive.
					 eg.
					 	void displayNumber(int num); // Formal parameter: "int num"

				Actual Parameter: 
					-The variable or expression corresponding to a formal parameter that appears in 
					 the function or method call in the calling environment.
					-Actual parameters (arguments) are the specific values that are 
					 provided to the function when it is called, corresponding to the formal parameters
					eg.
						displayNumber(42); // Actual parameter: "42"

			-Pass by Value/ call by value:
				#include <iostream>
				using namespace std;
				void func(int n){						//formal parameter
					n++;
					std::cout << "Inside func: "<< n << std::endl;
				}

				int main()
				{
					int n = 90;
					std::cout << "Before func: "<< n << std::endl;			//90
					func(n);											//91			//Actual parameter
					std::cout << "After func: "<< n << std::endl;			//90
					return 0;
				}

			-Pass by reference/ call by reference:
				#include <iostream>
				using namespace std;

				void func(int &n){
					n++;
					std::cout << "Inside func: "<< n << std::endl;
				}

				int main()
				{
					int n = 90;
					std::cout << "Before func: "<< n << std::endl;			//90

					//pass by reference- sending memory 
					func(n);											//91
					
					std::cout << "After func: "<< n << std::endl;			//91
					return 0;
				}

			Homework:
				1)ArithmeticProgression  = 3 * n +  7 make function of it.
					->
						#include <iostream>
						using namespace std;

						int main()
						{
							int n;
							std::cout << "enter n: " << std::endl;
							cin>>n;
							
							std::cout << "The Arithmetic Progression for "<< n << " is "<< (3*n)+7;
							return 0;
						}

				2)Total no.of set bits (1) from given 2 numbers.
					eg.
						2 -> 10 			->1
						3 -> 11			->2
						Total set bits : 1+2 = 3
					->
						#include <iostream>
						#include <bitset>
						using namespace std;

						int setBitCouter(int z){
							int counter=0;
							
							while(z != 0){
								if(z&1)
									counter++;
								z >>=1;
							}
							return counter;
						}

						int main()
						{
							int a,b;
							std::cout << "enter a: ";
							cin>>a;
							
							std::cout << "enter b: ";
							cin>>b;
							
							std::cout << "Binary if a :: "<< bitset<32>(a) << std::endl;
							std::cout << "Binary if b :: "<< bitset<32>(b) << std::endl;
							
							//couting the no.of setbits, for a
							int sbA = setBitCouter(a);
							
							//for b
							int sbB = setBitCouter(b);
							
							std::cout << "The no.of setbits in "<<a<< " & "<<b<<" is "<< sbA+sbB << std::endl;
							
							return 0;
						}
				
				3)Fibonacci series nth term function:
					input: n = 5;			// 0 1 1 2 3 5 8 13
					output: 3			//5th num of that series.
					->
						#include <iostream>
						using namespace std;

						int main()
						{
							int prev= 0, curr= 1;
							
							int n;
							cout<<"Enter n:";
							cin>>n;
							
							int i=0;
							
							for(;i<n-1; i++){
								// cout<<prev<<" ";            
								
								int next = prev + curr;
								prev = curr;          
								curr = next;          
							}
							
							std::cout << "The "<< i+1 <<" number term is "<< prev << std::endl;
							return 0;
						}

			Local variable: 
				A variable declared within a function or a block of code is called a local variable. 
				Local variables are frequently used to temporarily store data in a defined 
				scope where they can be accessed and manipulated. They are stored in the memory stack, 
				Once the function or block of code in which the local variable is declared finishes executing. 
				The variable is automatically removed from the memory.

		2]. Number complement

			#include <iostream>
			#include <bitset>
			using namespace std;
			int main()
			{
				int n;
				std::cout << "Enter num : " << std::endl;
				cin>>n;
				
				cout<<"Binary of "<<n<<" "<<bitset<32>(n)<<endl;
				std::cout << "Complement of above binary "<< bitset<32>(~n) << std::endl;
				
				return 0;
			}
			
		3]. Square root of n
---------------------------------------------------------------------------------------------------------
	08/08/23
Lecture-9:
	Introduction to Arrays
		-Array is a collection of variables of the same type.
		-Arrays are used to store multiple values of same Datatype in a single variable, 
		 instead of declaring separate variables for each value.
		-To declare an array, define the variable type, specify the name of the array 
		 followed by square brackets and specify the number of elements it should store

		-All arrays consist of contiguous memory locations. 
		 The lowest address corresponds to the first element and the highest address to the last element.

		-Array elements/ value we can access by INDEX.
		-Array start from 0.
		-defaultly they contain garbage value inside it.
		-use index num to access value of array on that location.
		
		-size of array = n, then till (n-1) index we can access.

		-Array declaration:
			 int a[10] ={1,2,3};         //ok
    
			int b[3] = {1,2,3};         //ok
			
			int c[] = {1,2,3,4,5,6,7};      //ok
			
			// int d[2] = {1,2,3,4,5,6,7};     //not ok
			
			// int e[];            //not ok

			// int f[10];              //not ok
			// f[10] = {1,2,2};
			// f[] = {1,2,4,3};

			int g[15];				//ok
	
		-declararing array with random/ Garbage value:
			int a[10];
			for(int i=0;i<10;i++)
				cout<<i<<" "<<a[i]<<"\n";

		-Initializing all array element with 0.
			int a[10] ={0};		
			for(int i=0;i<10;i++)
				cout<<i<<" "<<a[i]<<"\n";

			-When you try to initialize some elements of array, they will get your specified value, 
				& rest all element of array elements become zero.

			--here in above case first element is initialized with 0, & rest all become will initialized with zero. 
		
		-Initializing all array element with 1 WON'T WORK ❌, only with 0 it will work.
			int a[10] ={5};		
			for(int i=0;i<10;i++)
				cout<<i<<" "<<a[i]<<"\n";

			In the above example, only the first element will be initialized to 5. All others are initialized to 0.

		--Here in below
			example you can see that if you try to initialize any position's value in array,
			then that position will get specified mentioned value, rest all by default initialized with zero.

			#include <iostream>
			using namespace std;

			int main()
			{
				int a[10] = {2,8};
				a[9]=90;
				a[5]=60;
				
				for(int i=0;i<10;i++)
					std::cout << i <<" "<<a[i]<< "\t";					
					
				return 0;
			}
				//2       8       0       0       0       60      0       0       0       90
			
		-To initialize array element with some default value,
			int a[10];
			for(int i=0;i<10;i++)
				a[i] = 4;
			
			for(int i=0; i<10;i++)
				std::cout << i << " " << a[i] << std::endl;
			
			//or using fill_n method
			std::fill_n(arrayName, arraySize, defaultValue);

			std::fill_n(a,10,90);

		string cars[4];
		eg.
		 int a[] = {1,2,3};
		 std::cout << sizeof(a) << std::endl;			//each int size is 4 so here, 12.

		 int b[] = {1,2,3,4};
		 std::cout << sizeof(b) << std::endl;			//each int size is 4 so here, 16.

		 //to print memory address of variable stored use &.
		 	int b=90;
			cout<< "memory location of B :: "<<b<<" "<<&b;

		for array just print the variable name it will give the memory address
			int a[] = {1,2,3};
			cout<< "memory location of Array a :: "<<a<<" "<<&a<<endl;			//this both a & (&a) will print the same thing.
		
		-Index accessing:
			int a[5] ={1,2,3,4,5};
				//100 , 104, 108, 112, 116			--memory address.
			
			-variable a will store the base address.
			-Suppose 100, first element's address, the next will be 104, next 108 coz size of int is 4 byte.

			a[0];			//base address	100, output value will be 1
			a[3];			//(base address + indexNum * sizeOfDatatype) =100 + 3*4 = 112, value will be 4.
        
	   	----External Link---------
			https://www.tutorialspoint.com/cplusplus/cpp_arrays.htm	
		-------------

		-If we try to access the index which is greater than size of array,
			then you will get an GARBAGE value.
		
		-Finding array length
			we can find the length using sizeof operator,
			-first find the sizeof whole array
			-then divide it by sizeof Datatype of that array.
			eg.
				int a[10];
				sizeof (a); //output : 40
				sizeof(int);	//output:4
				sizeof (a)/sizeof(int); //output : 10

			BUT,here in below case we initialized just 2 element then it should show the 
				length is 2 but according to that above method it will print length as whole 
				array size. drawback.
				eg.
					int b[10]={1,5};			//length:2
					int len = sizeof(b)/sizeof(int);		//len: 10 		(not expected this.)

		-Advance for loop in c++:
			int b[10] = {90};

			for(int j: b){
				cout<<j<<"\t";
			}

			for(int i: b)
				cout<<i<<"\t";
		
		-BAD Practice:
			int size;
			cin>>size;

			int arr[size];				//never do this.
				//instead of doing like this directly mention constant as size of array thats better,
			int arr[10000];			//this is ok than above

		-Practice:
			1.Array:
				#include <iostream>
				using namespace std;
				void printArray(int[], int);        //function declaration says that takes input parameter first as array, 2nd is integer

				int main()
				{
					//creating array & initializing
					int arr[10]= {1,2,3,4,5,6,7,8,9,10};
					
					//printing it,
					for(int i=0;i<10;i++)
						std::cout << arr[i] << "\t";
						
					std::cout << std::endl;     //or
					
					//printing using function
					printArray(arr, 10);
					
					std::cout << std::endl;
					
					//using advance loop,
					for(int j: arr)
						cout << j << "\t";
					
					return 0;
				}

				void printArray(int v[],int size){
					for(int i=0;i<size;i++)
						std::cout << v[i] << "\t";
				}

			2.Min/Max Array:
				#include <iostream>
				#include <climits>
				using namespace std;

				void getMax(int n[], int len){
					int maxi = INT_MIN;
					
					for(int a=0; a<len; a++){
						
						// if(maxi < n[a]){
						//     maxi = n[a];
						// }
						
						maxi = max(maxi, n[a]);     //it will compare these 2 values we passed then 
												// decides which one is maximum & stores maximum value.
					}
					cout<<"MAX : "<<maxi;
				}

				void getMin(int k[], int L){
					int mini = INT_MAX;
					
					for(int a=0; a<L; a++){
						
						// if(mini > k[a]){
						//     mini = k[a];
						// }
						
						//or using built in fuction
						mini = min(mini,k[a]);       //it will compare these 2 values we passed then 
												// decides which is min & stores minimum value
					}
					
					cout<<"Min : "<<mini;
				}

				int main(){
					int array[100];
					
					int size;
					std::cout << "Enter size of array : (should be <100)" << std::endl;
					cin>>size;
					
					std::cout << "Enter "<<size<<" elements in array :" << std::endl;
					
					//taking array elements
					for(int i=0; i<size; i++)
						cin>>array[i];
						
					//printing array
					for(int o=0; o<size; o++)
						cout<<array[o]<<" ";
					
					std::cout << std::endl;
					getMax(array,size);
					
					std::cout << std::endl;
					getMin(array,size);
					
					return 0;
				}

		-Passing array to function:
			--here passing array to function means passing memory address of that array to function,
			  so as we learnt name of array holds the base/ starting memory address of array.
			  eg.
			  	int ar[10];		//here ar holds the memory address, so if we pass ar to fuction
								//then we passing memory address of array, not copy of array.
			
			--so if you update the array inside any other function also, this will affect 
			  the original array.
			eg.
				#include <iostream>
				using namespace std;

				void UpdateArr(int z[], int len){
				
					z[5] = 500;			//updating value at 6th location.
					
					std::cout << "Inside Update function array: " << std::endl;
					for(int i=0;i<10;i++)
						cout<<z[i]<<"\t";
						
					cout<<"\n";
				}

				int main(){
					int arr[100] = {1,2,3,4,5,6,7,8,9,10};
					
					std::cout << "Inside main function array: " << std::endl;
					for(int i=0;i<10;i++)
						cout<<arr[i]<<"\t";
						
					std::cout  << std::endl;
					UpdateArr(arr, 10);
					
					std::cout << "Back to main function again Now Array : " << std::endl;
					for(int i=0;i<10;i++)
						cout<<arr[i]<<"\t";
						
					return 0;
				}
				//output:
					Inside main function array: 
					1       2       3       4       5       6       7       8       9       10
					Inside Update function array: 
					1       2       3       4       5       500     7       8       9       10
					Back to main function again Now Array : 
					1       2       3       4       5       500     7       8       9       10

				Sum of array elements:
					#include <iostream>
					using namespace std;

					int SUM(int z[], int len){	
						int sum =0; 
						
						for(int i=0;i<10;i++)
							sum += z[i];
							
						return sum;
					}

					int main()
					{
						int arr[100] = {1,2,3,4,5,6,7,8,9,-10};
						
						int sum = SUM(arr,10);
						std::cout << "Sum of Array elements :: "<< sum << std::endl;	//Sum of Array elements :: 35
						
						return 0;
					}

				Reverse Array:
					#include <iostream>
					using namespace std;

					int main()
					{
						int arr[10]= {1,2,3,4,5,6,7,8,9,10};
						
						//Array
						for(int q: arr)
							std::cout << q << "\t";                 //use this advance loop if your are using whole size of array.
							
						std::cout << std::endl;
						
						//printing array in reverse way. means not reversing actual array.
						for(int i=9; i>=0; i--)
							cout<< arr[i]<<"\t";
						
						//for this you should know the length of array
						//array reversed.
						int len = 10;
						for(int i=0; i<len/2; i++){
							
							int temp = arr[i];
							arr[i] = arr[(len-1)-i];
							arr[(len-1)-i] = temp;
						}
						
						//printing original array
						std::cout << std::endl;
						for(int i: arr){
							cout<<i<<"\t";
						}
						return 0;
					}

					//or
						#include<iostream>
						using namespace std;

						void reverse(int arr[], int n) {

							int start = 0;
							int end = n-1;

							while(start<=end) {
								swap(arr[start], arr[end]);
								start++;
								end--;
							}
						}

						void printArray(int arr[], int n) {
							
							for(int i=0; i<n; i++) {
								cout << arr[i] << " ";
							}
							cout << endl;
						}

						int main() {

							int arr[6] = {1,4,0,5,-2,15};
							int brr[5] = {2,6,3,9,4};

							reverse(arr, 6);
							reverse(brr, 5);

							printArray(arr, 6);
							printArray(brr, 5);

							return 0;
						}

				Linear search:
					#include <iostream>
					using namespace std;

					int main()
					{
						int arr[10]= {1,2,3,4,5,6,7,8,9,10};
						int key;
						
						std::cout << "enter key: " << std::endl;
						cin>>key;
						
						for(int i=0;i<10;i++){
							if(arr[i] == key){
								std::cout << "Key Found, at "<< i << std::endl;
								break;
							}
							
							if(i==9)
								std::cout << "Key Not Found." << std::endl;             //array traversed till last but didn't found key
						}
							
						return 0;
					}
---------------------------------------------------------------------------------------------------------
	09/08/23
Lecture-10:
	Alternate swap
		i/p-> {1,2,3,4,5,6};
		o/p-> {2,1,4,3,6,5};
		->
			#include <iostream>
			using namespace std;

			void swapAlternate(int ar[], int size){
    
				for(int i=0; i<size; i +=2){
					// if((i+1)<size){
					//     int temp = ar[i];
					//     ar[i] = ar[i+1];
					//     ar[i+1] = temp;
					// }
					
					// or
					
					if((i+1)<size)
						swap(ar[i],ar[i+1]);
				}
			}


			int main()
			{
				int a[100];
				
				int size;
				std::cout << "Enter size of array:" << std::endl;
				cin>>size;
				
				cout<<"Enter "<< size << "elements in array: ";
				
				//inputing array elements
				for(int i=0;i<size;i++)
					cin>>a[i];
				
				//printing array.
				for(int i=0; i<size; i++)
					cout<<a[i]<<"\t";
					
				
				for(int i=0; i<size; i +=2){
					// if((i+1)<size){
					//     int temp = a[i];
					//     a[i] = a[i+1];
					//     a[i+1] = temp;
					// }
					
					// or
					
					if((i+1)<size)
						swap(a[i],a[i+1]);
				}

				//or using function
				//swapAlternate(a, size);
				
				cout<<"\n";
				
				for(int i=0; i<size; i++)
					cout<<a[i]<<"\t";

				return 0;
			}

	-find unique element in array
		(hint: XOR with same num will give output 0) a ^ a =0
		eg.
			5 ^ 5 = 0
		(XOR with zero & any other num will ouput the same num ) 0 ^ a = a
		eg.
			0 ^ 5 = 5
			0 ^ 23 = 23.
		->
			int findUnique(int arr, int size){
				int ans = 0;
				for(int i=0;i<size;i++)
					ans = ans ^ arr[i];

				return ans;
			}
	
	-check the occurence of elements are unique or not?
		bool uniqueOccurrences(vector<int>& arr) {
			vector<int> ans;

			int counter=1;
			
			for(int i=0;i<arr.size(); i++){
				int temp = arr[i];
				if(arr[i] == -2000)
					continue;
				for(int j=i+1; j<arr.size();j++){
					if(temp == arr[j]){
						arr[j] = -2000;
						counter++;
					}
				}
				ans.push_back(counter);
				counter=1;
			}

			for(int i=0; i<ans.size(); i++){
				int temp = ans[i];
				for(int j=i+1; j<ans.size(); j++){
					if(temp == ans[j])
						return false;
				}
			}
			return true;
		}

	-find duplicate element in array
		Vector- It's dyanamic kind of thing.

		//not optimized
			int n = arr.size();
			for(int o=0;o<n;o++){
				int t = arr[o];

				if(o<n-1)
					for(int i=o+1; i<n; i++)
						if(t == arr[i])
							return t;
			}
		
		//optimized
			int findDuplicate(vector<int> &arr) 
			{
				// Write your code here
				int ans =0;

				//first we initialized the ans to 0 coz xor 0 with any other num will
				//give ans as that num only.

				//then we run for loop 0 to till length of array some answer will come,
				//again we will run loop from 1 to length-1 of array means to skip any one value.
				//then the answer will be duplicate value.

				for(int a=0; a<arr.size(); a++)
					ans = ans ^ arr[a];
				
				//we are doing xor with a directly coz there is only one duplicate element
				//& array contain the element from 1 & n-1 at least once
				for(int a=1; a< arr.size(); a++)
					ans = ans ^ a;

				return ans;
			}

	-find all duplicates num in array.
		//dyamica array in c++
			#include <iostream>
			#include <vector>
			int main() {
				// Write C++ code here
				//dynamic array
				
				std::vector<int> arr = {1,2,3};
				
				for(int i=0;i<arr.size(); i++)
					std::cout<<arr[i]<<" ";
					
				arr.push_back(100);
				
				std::cout<<"\n";
				
				arr.push_back(200);			//inserting num in array.
				
				for(int i=0;i<arr.size(); i++)
					std::cout<<arr[i]<<" ";
				
				return 0;
			}

		//brute force-> TIME LIMIT EXCEEDED
			vector<int> findDuplicates(vector<int>& nums) {

				vector<int> dual;
				for(int a=0; a< nums.size(); a++)
				{
					int temp = nums[a];
					for(int b =a+1; b< nums.size(); b++){
						if(temp == nums[b]){
							dual.push_back(nums[b]);
							break;
						}
					}
				}
				return dual;
			}

		//optimized
			vector<int> findDuplicates(vector<int>& nums) {

				vector<int> dual;
				sort(nums.begin(), nums.end());

				for(int a=1; a< nums.size(); a++)
				{
					if(nums[a-1] == nums[a]){
						dual.push_back(nums[a]);
					}
				}
				return dual;
			}

			vector<int> findDuplicates(vector<int>& nums) {

				vector<int> dual;			//dynamic array.
				set<int> st;				//set which contains any element once only.

				for(int a=0; a< nums.size(); a++)
				{
					if(st.count(nums[a])){				//count method return 1 if that element present in set, else 0.
						dual.push_back(nums[a]);
					}else{	
						st.insert(nums[a]);				//insert method will insert that element/value into set.
					}
				}
				return dual;
			}

	-Sorting array:
		#include <iostream>
		#include <set>
		#include<algorithm> //mandatory for sort functionality
		using namespace std;

		int main() {
			// Write C++ code here
			int nums[] = {5,4,3,2,1};
			
			int len = sizeof(nums)/sizeof(nums[0]);     //calculating the length of array. 
												//this works if complete array which length is specified is filled completely, like a[100], then all 100 elements should be present.
												//or they if left length of array empty, like int arr[] = {1,2,3};
			
			for(int i=0;i<len; i++)
					cout<<" "<<nums[i];
					
			cout<<"\n";
			
			sort(nums, nums+len);			//from base(starting) address to till last
			
			//sort(starting array_memory_address, end array_memory_address);
			
			for(int i=0;i<len; i++)
				cout<<" "<<nums[i];
			return 0;
		}
	
	-Set:
		-set by default store element in ascending order,
		-set store unique elements. not duplicate.
		-Datatype: Set can take any data type depending on the values, e.g. int, char, float, etc.
		eg.
			std::set <data_type> set_name;

			set<int> val; // defining an empty set
			set<int> val = {6, 10, 5, 1}; // defining a set with values

			//to check element present in set or not use count method with parameter in it.
			val.count(5);			//if that value present in set it returns 1
			val.count(12);			//if that value absent in set it returns 0
		Pratical:
			#include <iostream>
			#include <set>
			using namespace std;
			int main() {
				std::set<int> a;
				a.insert(10);
				a.insert(9);
				a.insert(7);
				
				a.insert(9);        //these 2 values won't get added.
				a.insert(7);
				
				a.insert(90);
				a.insert(70);
				
				
				a.insert(23);
				a.insert(34);            //inserting into set.


				cout<<*a.begin()<<"\t";     //return first element of set.
				
				cout<<*a.end()<<"\t";       //return the last element index, Length of set

				//length of set:
				cout<<"\n the length of set A is :: "<<a.size();

				//printing set
				for (int str : a) {
					cout << str << ' ';
				}
				
				cout<<"\n";
				cout<<"is 12 present in set A :: "<<a.count(12);			//0 means not present
				cout<<"is 10 present in set A :: "<<a.count(10);			//1 means present
				
				std::cout << '\n';

				return 0;
			}
		
			//printing char set,
			--need to define the iterator on it which is character (char) type.
				set<char> set1;
				set<char> :: iterator MY;
				for(MY = set1.begin(); MY != set1.end(); MY++){
					cout<< *MY;
				}

	-Array intersection (common element from 2 array).
		Intersection Of Two Sorted Arrays
		Constraints:
			1 <= T <= 100
			1 <= N, M <= 10^4
			0 <= A[i] <= 10^5
			0 <= B[i] <= 10^5
			Time Limit: 1 sec
		
		Sample Input 1 :
			2				T		test cases
			6 4				N M
			1 2 2 2 3 4		A	array 
			2 2 3 3			B	array

			3 2				N M  lengths
			1 2 3			array A
			3 4  			array B
		Sample Output 1 :
			2 2 3		
			3   
		Explanation For Sample Input 1 :
			For the first test case, the common elements are 2 2 3 in both the arrays, so we print it.
			For the second test case, only 3 is common so we print 3.
		->
			//Time Limit EXCEEDED (TLE)
				#include <bits/stdc++.h> 
				vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
				{
					// Write your code here.
					vector<int> common;

					for(int i=0; i<n; i++){
						int temp = arr1[i];

						for(int j=0; j<m; j++){
							if(temp == arr2[j]){
								common.push_back(temp);
								arr2[j] = -1;
								break;
							}
						}
					}
					return common;
				}
			
			//optimized:
				#include <bits/stdc++.h> 
				vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
				{
					// Write your code here.
					vector<int> common;
					int i=0,j=0;
					
					while(i<n && j<m){
						if(arr1[i] == arr2[j]){
							common.push_back(arr1[i]);
							i++;j++;
						}else if(arr1[i]< arr2[j]){
							i++;
						}else{
							j++;
						}
					}
					return common;
				}

	-Pair sum
		-https://www.codingninjas.com/studio/problems/pair-sum_697295
		Sample Input 1:
		5
		1 2 3 4 5
		Sample Output 1:
		1 4
		2 3

		Explaination For Sample Output 1:
		Here, 1 + 4 = 5
			2 + 3 = 5
		Hence the output will be, (1,4) , (2,3).
		
		Sample Input 2:
		0
		2 -3 3 3 -2
		Sample Output 2:
		-3 3
		-3 3
		-2 2

		#include <bits/stdc++.h>
		vector<vector<int>> pairSum(vector<int> &arr, int s){
			vector< vector<int> > ans;

			for(int i=0; i<arr.size(); i++){
				for(int j=i+1; j<arr.size(); j++){
					if(arr[i]+arr[j] == s){
						vector<int> temp;
						temp.push_back(min(arr[i], arr[j]));            
						temp.push_back(max(arr[i], arr[j]));
						ans.push_back(temp);
					}
				}
			}
			sort(ans.begin(), ans.end());
			return ans;
		}
		
	-Triplet sum:
		#include <bits/stdc++.h> 
		vector<vector<int>> findTriplets(vector<int>arr, int n, int K) {  
			sort(arr.begin(),arr.end());
				vector<vector<int>>ans;
			set<vector<int>> s;
			for(int i=0;i<n;i++){
				int sum = K - arr[i];
				int j = i+1;
				int k = n-1;
				while(j<k){
						if(arr[j]+arr[k] == sum){
							vector<int> temp;
							temp.push_back(arr[i]);
							temp.push_back(arr[j]);
							temp.push_back(arr[k]);
							sort(temp.begin(),temp.end());
							s.insert(temp);
							j++;
						}
					else if(arr[j]+arr[k]<sum){
						j++;
					}
					else{
						k--;
					}
				}
			}
			for(auto val: s){
				ans.push_back(val);
			}
			return ans;
		}

	-sort 0's & 1's:
		#include <iostream>
		using namespace std;

		void printArr(int a[], int n){
			for(int i=0;i<n; i++){
				cout<<a[i] << "\t";
			}
			cout<<"\n";
		}

		int main() {
			int arr[] = {1,1,1,1,1,0,0,0,0,0};
			int len = 10;
			printArr(arr, len);
						
			int i=0, j = len-1;
			while(i <= j ){
				if(arr[i] > arr[j]){
					swap(arr[i],arr[j]);
					i++;j--;
				}else if(arr[i] < arr[j]){
					i++;
				}else if(arr[i] ==  arr[j]){
					j--;
				}
			}
			
			printArr(arr, len);
			return 0;
		}

	-sort 0's, 1's & 2's:
		remain..
---------------------------------------------------------------------------------------------------------
	10/08/23
Lecture-11:
	Time & Space Complexity, How to avoid Time Limit Exceeded [TLE]
		Time Complexity:
			-It is the amount of time taken by an algorithm to run, as function of length of input.
			-the computational complexity that describes the amount of computer time it takes to run an algorithm. or
			-The Time Complexity of an algorithm/code is not equal to the actual time required to execute a particular code, 
			 but the number of times a statement executes.

			-we use time/space complexity for making better programs.
			-using these terms, we can decide algorithm is fast or slow.
			-It represented in 3 forms,
				1). Big O - Upper bound, (at max this much time program will take). worst case scenario
				2). Theta θ - Average, average case scenario.
				3). Omega Ω - Lower bound (at minimum, this much amount of time program will take) best case scenario.
			
			-Time:
				1) Constant time O(1).
				2) Linear time O(n).
				3) Logarithmic time O(log n).
				4) Quadratic time O(n²).		(nested loops)
				5) Cubic time O(n³).		(nested nested loops)

				chart: 
						O(N!)			--maximum time takes.
						O(2ⁿ)
					↑	O(n³)
					↑	O(n²)
					↑	O(n log(n))
					↑	O(n)
					↑	O(log(n))
					↑	O(1)			--minimum time takes.
			eg.
				-ignore constant, choose highest degree in equation.
					f(n) = 2n² + 3n 
					->
						O(n²)
					f(n) = 4n⁴ + 3n³
					->
						O(n⁴)
					
					f(n) = n² + log(n)
					-> O(n²).

					f(n) = 120043
					->
						O(1).
					
					f(n) = 5n³ + 3n² + 5
					->
						O(n³)
					
					f(n) = n³ / 300
					->
						O(n³)
					
					f(n) = 5n² + log(n)
					->
						O(n²)
					
					f(n) = n/4
					->
						O(n)				(Linear Time complexity)
					
					f(n) = (n+4)/4
					->
						O(n)				(Linear Time complexity)

				-Take this function to find its time complexity:
					void printArr(int a[], int n){
						for(int i=0;i<n; i++){
							cout<<a[i] << "\t";
						}
						cout<<"\n";
					}
					->
						here the length of array is n, so time depends length of array,
						so 
						Time Complexity will be O(n).
				
				-for calculating time complexity, if 2 for loops are there which are nested then their last
				value will be multiplied with eachother,
					for(i=0;i<n;i++)
						for(j=0;j<n;j++)
							//statements
					->
						time complexity: n*n  = O(n²);
					
				-if 2 for loops are there which are next to each other then we add their last value;
					for(int i=0;i<n; i++) ->	O(n)
						//statements
					
					for(j=0;j<m;j++)		-> O(m)
						//statements
					
					Time Complexity = O(n+m)

				-for this?
					for(i=0;i<n;i++)
						for(j=0;j<n;j++)
							//statements		// O(n²)
					
					for(j=0;j<n;j++)			// O(n)
						//statements
					
					= O(n²) + O(n)
					Time Complexity = O(n²)
				
				-for this?
					for(i=0;i<n;i++)			//this loop will run till (n-1)	ie.	O(n)
						for(j=n;j>i;j--)		//suppose i=0 then, this loop will run n to 0, ie. O(n)
							//statements		
					
					Time Complexity = O(n²)

		Space Complexity:
			-The total amount of memory space used by an algorithm/program, including the space of input values for execution.
			-The space complexity of an algorithm or a computer program is the amount of memory space required to solve an instance 
			 of the computational problem as a function of characteristics of the input. 
			 It is the memory required by an algorithm until it executes completely.
			-This includes the memory space used by its inputs, called input space, and any other (auxiliary) memory it uses during execution, 
			 which is called auxiliary space.

			-Similar to time complexity, space complexity is often expressed asymptotically in big O notation, such as O(n), O(n long(n)), 
			eg.
				-if we mention the array size then its fixed space complexity O(1).
				-if we declare any variable, it will take fixed space, so space Complexity O(1).
---------------------------------------------------------------------------------------------------------
	12/08/23
Lecture-12:
	Binary Search:
		Binary search is applied only in list/ array where the data is sorted, 
		 either in increasing or in decreasing order, called monotonic function.
		Steps for Binary Search :
		1. Find middle element of the given array.
			If the value found at mid index is equal to key, return true else,
		2. if key >  mid,
			then go left side of the array by start = mid+1 to end is same.
		3. if Key <  mid,
			then go right side of the array from start is same & end = mid -1
		3. If key not found after searching whole array, return false.

		--here in case of binary search the Time Complexity is O(log(n)), where n is length of array.
		--because for every next iteration the array size is getting half,
		  for first len/2
		  for 2nd len/4
		  for 3rd len/8, like len/2¹, len/2², len/2³,... len/2ⁿ
		  len/2ⁿ = 1
		  len = 2ⁿ
		  n = log₂(len) 

		Pratical:
			#include <iostream>
			using namespace std;

			void printArr(int a[],int size){
				for(int i=0;i<size;i++){
					cout<<a[i]<<" ";
				}
				
				std::cout << std::endl;
			}

			int BinarySearch(int b[], int len, int key){
			
				int start = 0, end = len-1;
				
				//int mid = (start+end)/2;
				
				int mid = start + (end - start)/2;
    
				//sometimes array length is too large that start & end index is of (2³¹ - 1) & (2³¹ - 1) 
				//then their addition will be out of range of integer
				
				// so to avoid this issue we can use this formula,			

				while(start <= end){
					
					if(b[mid] == key)
						return mid;
					else if(key > b[mid])
						start = mid+1;
					else
						end = mid-1;
						
					mid = start + (end - start)/2;
				}
				return -1;
			}

			int main()
			{
				int Even[] = {2,4,6,8,12,14,16,22,28,30};
				int Odd[] = {1,3,5,9,13,17,41,43,59,55,69};
				
				cout<<"Even array: ";
				printArr(Even,10);
				
				
				cout<<"Odd array: ";
				printArr(Odd,11);
				
				int element;
				std::cout << "Enter element you want to find in Even array: " << std::endl;
				cin>>element;
				
				std::cout << element << " is at " << BinarySearch(Even, 10, element) << " Index." << std::endl;
				
				std::cout << "Enter element you want to find in Odd array: " << std::endl;
				cin>>element;
				std::cout << element << " is at " << BinarySearch(Odd, 11, element) << " Index." << std::endl;
				
				std::cout << "--END--" << std::endl;
			}
---------------------------------------------------------------------------------------------------------
	12/08/23
Lecture-13:
	Questions on BinarySearch
	#Pair in C++ Standard Template Library (STL)
		-Pair is used to combine together two values that may be of different data types. 
		-Pair provides a way to store two heterogeneous objects as a single unit. 
		-It is basically used if we want to store tuples. 
		-The pair container is a simple container defined in <utility> header consisting of two data elements or objects. 

		-The first element is referenced as ‘first’ and the second element as ‘second’ and the order is fixed (first, second).
		-Pair can be assigned, copied, and compared. 
		-The array of objects allocated in a map or hash_map is of type ‘pair’ by default in which all the ‘first’ elements are unique keys associated with their ‘second’ value objects.
		-To access the elements, we use variable name followed by dot operator followed by the keyword first or second.
		Syntax: 
			pair <data_type1, data_type2> Pair_name
			eg.
				#include <iostream>
				#include <utility>
				using namespace std;
				int main()
				{
					// defining a pair
					pair<int, char> PAIR1;

					// first part of the pair
					PAIR1.first = 100;

					// second part of the pair
					PAIR1.second = 'G';

					cout << PAIR1.first << " ";
					cout << PAIR1.second << endl;

					// defining a pair
					pair<string, double> PAIR2("GeeksForGeeks", 1.23);
					
					cout << PAIR2.first << " ";
					cout << PAIR2.second << endl;

					return 0;
				}
				ouput:	100 G

				Initializing a Pair: We can also initialize a pair. 
					Syntax:
						pair <data_type1, data_type2> Pair_name (value1, value2) ;
					
					Different ways to initialize pair:  

						pair  g1;         //default
						pair  g2(1, 'a');  //initialized,  different data type
						pair  g3(1, 10);   //initialized,  same data type
						pair  g4(g3);    //copy of g3
						
						Another way to initialize a pair is by using the make_pair() function. 
							g2 = make_pair(1, 'a');

						Another valid syntax to declare pair is:
							g2 = {1, 'a'};

				Note: If not initialized, the first value of the pair gets automatically initialized. 
				
					#include <iostream>
					#include <utility>
					using namespace std;
					int main()
					{
						pair<int, double> PAIR1;
						pair<string, char> PAIR2;
						
						// it is initialised to 0
						cout << PAIR1.first;
						
						// it is initialised to 0
						cout << PAIR1.second;
						
						cout << " ";
						
						// it prints nothing i.e NULL
						cout << PAIR2.first;
							
						// it prints nothing i.e NULL
						cout << PAIR2.second;
						
						return 0;
					}
				-for more example Visit GFG pair
					1)swap
					2)make_pair
					3)tie

	1)Find the First & Last occurence of element in array:
		//Linear search method
			#include <bits/stdc++.h> 
			pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
			{
				pair<int, int> ans;
				int i;
				int len = arr.size();

				for(i=0; i< len;i++){
					if(k == arr[i]){
						ans.first = i;
						break;
					}
				}
				
				if(i == len)
					ans.first = -1;
				

				for(i=len-1; i>-1; i--)
				{
					if(k == arr[i]){
						ans.second = i;
						break;
					}
				}

				if(i == -1)
					ans.second = -1;

				return ans;
			}

		//Binary search method
			#include <bits/stdc++.h> 
			int firstOcc(vector<int>& arr, int n, int k){
				int s=0,e=n-1,i=-1;
				int mid = (s+e)/2;
				while(s<=e){
					if(k == arr[mid]){
						i = mid;
						e = mid -1;
					}else if(k > arr[mid]){
						s = mid +1;
					}else{
						e = mid -1;
					}
					mid = (s+e)/2;
				}
				return i;
			}

			int lastOcc(vector<int>& arr, int n, int k){
				int s=0,e=n-1,i=-1;
				int mid = (s+e)/2;
				while(s<=e){
					if(k == arr[mid]){
						i = mid;
						s = mid + 1;
					}else if(k > arr[mid]){
						s = mid +1;
					}else{
						e = mid -1;
					}
					mid = (s+e)/2;
				}
				return i;
			}

			pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
			{
				pair<int, int> ans;
				ans.first = firstOcc(arr, n, k);
				ans.second = lastOcc(arr, n, k);
				return ans;
			}

	example:To find the total no.of occurence of key in sorted array
		find the first/start index & last/end index, then 
		no.of occurence = (last - first)+1;
		eg.
			1 2 3 4 4 4 4 4 5 6 7
			--here 4's first index is 3 & last index is 7
			 so 7-3+1 = 5
			-no.of occurence of 4 is 5 times.
		
	2)Peak Index in Mountain Array:
		https://leetcode.com/problems/peak-index-in-a-mountain-array/
		//Linear or Brute force  algorithm			//TC- O(n)
			int peakIndexInMountainArray(vector<int>& arr) {
				int temp = arr[0], ans=0;
				for(int i=1; i< arr.size(); i++){
					if(temp < arr[i]){
						ans = i;
						temp = arr[i];
					}   
				}
				return ans;
			}
		
		//using Binary Search algorithm
			int peakIndexInMountainArray(vector<int>& arr) {
				int s=0, e= arr.size()-1;
				int mid = (s+e)/2;
				
				while(s < e){
					if(arr[mid] < arr[mid+1]){
						s = mid +1;
					}else{
						e = mid;
					}
					mid = (s+e)/2;
				}
				return e;
			}

	3)Find Pivot Index: HW
		-Left side summation & right side summation must be same then return the index of that element.
		//Linear search method:
			https://leetcode.com/problems/find-pivot-index/description/
			int pivotIndex(vector<int>& nums) {
				int left=0,right=0;
				int i=0;
				for(;i<nums.size(); i++){

					//for rightSide
					for(int j=i+1; j<nums.size(); j++){
						right += nums[j]; 
					}

					//for leftSide
					for(int k=0; k<i; k++){
						left += nums[k];
					}

					if(left == right)
					{
						break;
					}
					right=0; left=0;
				}

				if(i == nums.size())
						return -1;
				return i;
			}

---------------------------------------------------------------------------------------------------------
	13/08/23
Lecture-14:
	Binary Search Interview Questions | Problem set-2
		Find the pivot in sorted & rotated array,
		eg.
			sorted array : [1,2,3,4,5,6,7,8,9];	
			rotated array by 3 in right direction : [7,8,9,1,2,3,4,5,6];
		-finding pivot in it,
			-> The minimum value in array is a pivot element.
		Pratical:
			#include <iostream>
			using namespace std;

			void printArr(int a[], int L){
				for(int i=0;i<L;i++){
					cout<<a[i]<<" ";
				}
				std::cout << std::endl;
			}

			int main()
			{
				int arr[] = {4,5,6,7,8,9,10,1,2,3};
				int len = 10;

				std::cout << "The array is : " << std::endl;
				printArr(arr, len);

				int s=0, e=len-1;
				int mid = (s+e)/2;

				while(s < e){
					if(arr[mid] >= arr[0]){
						s = mid + 1;
					}else{
						e = mid;
					}
					mid = (s+e)/2;
				}

				cout<<"The pivot Element is at location/index :"<<s<<" or at "<<e;
				return 0;
			}

		1). Search K In Rotated Sorted Array

			//Linear way O(n) time complexity,
				int search(vector<int>& arr, int n, int k)
				{
					// Write your code here.
					// Return the position of K in ARR else return -1.
					int i=0;
					for(;i<arr.size();i++){
						if(k == arr[i]){
							return i;
						}
					}

					if(i == arr.size())
						return -1;
				}

			//Using Binary search O(log(n)) Time complexity,
				int BinarySearch(vector<int>& arr, int start, int n, int key){
					int s = start, e= n-1;
					int mid= (s+e)/2;
					
					while(s <= e){
						if(arr[mid] == key){
							return mid;
						}else if(key > arr[mid]){
							s = mid + 1;
						}else{
							e = mid -1;
						}
						mid = (s+e)/2;
					}
					return -1;
				}

				int pivotFind(vector<int>& arr, int len){
					
					int s=0, e = len-1;
					int mid = (s+e)/2;

					while(s < e){
						if(arr[mid] > arr[0] ){
							s = mid +1;
						}else{
							e =mid;
						}
						mid = (s+e)/2;
					}
					return s;
				}

				int search(vector<int>& arr, int n, int k){
					// Return the position of K in ARR else return -1
					int pivot = pivotFind(arr, n);
					
					if(arr[0] <= k && k <= arr[pivot-1]){
						//first line from start to till pivot
						return BinarySearch(arr, 0, pivot, k);        
					}else{
						// second line from pivot to till end.
						return  BinarySearch(arr, pivot, n, k);
					}				
				}

		2). Square Root of a number
			//Linear Search, not optimized
				int floorSqrt(int n){
					for(int i=1;i<=n/2;i++){
						if(n == pow(i,2)){
							return i;
						}else if((n < pow(i,2)) && (n > pow(i-1,2))){
							return i-1;
						}else{
							continue;
						}
					}
				}

			//using BinarySearch optimized
				int floorSqrt(int n){
					int s=0, e = n;
					long long int mid = (s+e)/2;
					long long int sqr;
					long long int ans;

					while(s <= e){
						sqr = mid * mid;
						if(sqr == n){
							ans = mid;
							break;
						}else if(sqr > n){
							e = mid -1;
						}else{
							ans = mid;
							s = mid +1;
						}
						mid = (s+e)/2;
					}
					return ans;
				}

		3). Sqrt(x):
			//Linear search not optimized
				int mySqrt(int n) {
					int i=0;
					for(;i<=n;i++){

						if(n == pow(i,2)){
							break;
						}else if((n < pow(i,2)) && (n > pow(i-1,2))){
							return i-1;
						}else{
							continue;
						}
					}
					return i;
				}
			
			//using BinarySearch 
				int mySqrt(int n) {
					int s=0, e =n;
					long long int mid = (s+e)/2;			//used long long int to avoid int overflow exception.
					long long int ans;
					long long int sqr;

					while(s <= e){
						sqr = mid * mid;
						if(n == sqr){
							ans = mid;
							break;
						}else if(sqr > n){
							e = mid-1;
						}else{
							ans = mid;
							s=mid+1;
						}
						mid = (s+e)/2;
					}
					return ans;  
				}

		4). Square Root with decimal precision:
			#include <iostream>
			using namespace std;
			long long int SQRTn(int n){
				int s=0, e =n;
				long long int mid = (s+e)/2;			//used long long int to avoid int overflow exception.
				long long int ans;
				long long int sqr;

				while(s <= e){
					sqr = mid * mid;
					if(n == sqr){
						ans = mid;
						break;
					}else if(sqr > n){
						e = mid-1;
					}else{
						ans = mid;
						s=mid+1;
					}
					mid = (s+e)/2;			//or mid = s + (e-s)/2;
				}
				return ans;
			}

			double morePrecision(int n, int uptoDecimal, int sqrtNum){

				double factor=1;
				double ans= sqrtNum;

				for(int i=0; i< uptoDecimal; i++){
					factor = factor/10;

					for(double j=sqrtNum; j*j < n; j = j + factor){
						ans = j;
					}
				}
				return ans;
			}

			int main(){
				int n;
				cout<<"Enter n";
				cin>>n;

				int sqrt1 = SQRTn(n);
				cout<<"answer is upto 4 decimal precision ::"<< morePrecision(n, 4, sqrt1);
				return 0;	
			}
---------------------------------------------------------------------------------------------------------
Lecture-15:
---------------------------------------------------------------------------------------------------------
Lecture-16:
---------------------------------------------------------------------------------------------------------
Lecture-17:
---------------------------------------------------------------------------------------------------------
Lecture-18:
---------------------------------------------------------------------------------------------------------
Lecture-19:
---------------------------------------------------------------------------------------------------------
Lecture-20:
---------------------------------------------------------------------------------------------------------
#miscellaneous

	//Curly braces related..

		#include <iostream>
		using namespace std;

		int main()
		{
			if(0)
				if(0)
					std::cout << "nested if" << std::endl;
			else
				cout<<"nested else";					//if this else block is not present then outside else block got attached to inner if block
			else										//works like putting curly braces around if-else block.
				cout<<"outside if main IF got FALSE";
					
			return 0;
		}
	
	//Label
		if() can accept any non-zero or -ve value considered as true 
		if 0 then false.
		#include <iostream>
		using namespace std;

		int main()
		{
		
			if(2)					//if(-2)			this is also true.
				goto L2;

			L1: 
			
			std::cout << "Lable 1st" << std::endl;
			
			
			std::cout << "Lable 1st" << std::endl;
			
			
			std::cout << "Lable 1st" << std::endl;
			
			
			std::cout << "Lable 1st" << std::endl;
			
			L2:
				
			std::cout << "Lable 2nd" << std::endl;
			
			
			std::cout << "Lable 2nd" << std::endl;
			
			
			std::cout << "Lable 2nd" << std::endl;
			
			
			std::cout << "Lable 2nd" << std::endl;
			
			
			std::cout << "Lable 2nd" << std::endl;
			
			L3:
			return 0;
		}

	//Factorial:
		//fact program
		//position of increment decrement operator matters a LOTTTTTTTTT.
		#include <iostream>

		using namespace std;

		int main()
		{
			int n,t;
			cin>>n;
			t=n-1;
			
			while(t)
				n *= t--;
			
			std::cout <<endl<< n << std::endl;
			return 0;
		}

	//SWAP function:
		#include <iostream>
		using namespace std;

		int main()
		{
			int a = 10;
			int b = 20;
			cout << "Value of a before: " << a << endl;
			cout << "Value of b before: " << b << endl;

			// swap values of the variables
			swap(a, b);			//takes 2 values.

			//or
			a = a + b;	//a^b		//10+20=30
			b = a - b;	//a^b		//30-20=10
			a = a - b;	//a^b		//30-10=20

			cout << "Value of a now: " << a << endl;
			cout << "Value of b now: " << b << endl;
			return 0;
		}

	//while loop:
		#include <iostream>
		using namespace std;

		int main()
		{
			int i=0,j=0;
			
			while(i<5 && j<10){
				
				std::cout << i<<" "<<j << std::endl;			// and Operator is there so both condition must be true.
				i++;j++;									//output will be 0 to 4,
			}
			return 0;
		}

		//or if we used || or (,) then 0 - 9 will be printed.
		#include <iostream>
		using namespace std;

		int main()
		{
			int i=0,j=0;
			while(i<5 , j<10){          //while(i<5 || j<10)
				std::cout << i<<" "<<j << std::endl;
				i++;j++;
			}

			return 0;
		}

	//Remain 
		//Line 4237 Triplet sum didn't understand❌ (come back here later.).
		-Check TLE again (Time Limit Exceeded). https://www.geeksforgeeks.org/overcome-time-limit-exceedtle/

	//Self Solved:
		1. Two Sum
			vector<int> twoSum(vector<int>& nums, int target) {
				vector<int> ans;
				
				for(int i=0;i<nums.size(); i++){
					for(int j=i+1; j<nums.size(); j++){
						if(nums[i]+nums[j] == target){
							ans.push_back(i);
							ans.push_back(j);
						}
					}
				}
				return ans;
			}
---------------------------------------------------------------------------------------------------------