Selection Sort:
     #include <iostream>
     using namespace std;

     void SelectionSort(int *a, int n) {          // void SelectionSort(int a[], int n) {

          for(int i=0; i<n-1; i++){
               int minValueIndex=i;
               
               for(int j=i+1; j<n; j++)
                    if(a[minValueIndex] > a[j])
                         minValueIndex=j;                //selection of minimum element
                         
               swap(a[minValueIndex], a[i]);
          }
     }

     int main() {
          int arr[] = {4,3,2,1,9,8,8,9,10,11};
          int n=10;
          
          for(int i: arr)
               std::cout << i << "\t";

          std::cout << std::endl;
          SelectionSort(arr, n);
          
          for(int i: arr)
               std::cout << i << "\t";
          
          return 0;
     }

Bubble Sort:
     #include <iostream>
     using namespace std;

     void BubbleSort(int a[], int size){
          for(int i=0; i<size-1; i++)
               for(int j=i+1; j<size; j++)
                    if(a[i] > a[j])
                         swap(a[i], a[j]);
     }

     int main() {
          int arr[] = {4,3,2,1};
          int n=4;
          
          for(int i: arr)
               std::cout << i << "\t";
          
          std::cout << std::endl;
          BubbleSort(arr, n);
          
          for(int i: arr)
               std::cout << i << "\t";
               
          return 0;
     }

Sort Built-in function:
     #include <algorithm>
     #include <iostream>
     using namespace std;
     int main() {
          
          int arr[] = {4,3,2,1};
          int n=4;
          
          for(int i: arr)
               std::cout << i << "\t";
          
          std::cout << std::endl;
          sort(arr, arr+n);
          
          for(int i: arr)
               std::cout << i << "\t";
               
          return 0;
     }
     
Insertion Sort:
     #include <iostream>
     using namespace std;

     void InsertionSort(int *a, int size){
          for(int i=1; i<size; i++){
               int value = a[i],j;
               for(j=i-1; j>=0; j--){
                    if(a[j] < value)
                         break;
                    a[j+1] = a[j];
               }
               a[j+1] = value;
          }
     }

     int main() {
          
          int arr[] = {4,3,2,1};
          int n=4;
          
          for(int i: arr)
               std::cout << i << "\t";
          
          std::cout << std::endl;
          InsertionSort(arr, n);    
          
          for(int i: arr)
               std::cout << i << "\t";
               
          return 0;
     }

Number equality
Easy
0/40
Problem statement
Alice has two integers, 'X' and 'Y'. She wants to make both numbers equal. As usual, she cannot do it herself and needs your help.



In one operation, Alice will select one integer from 'X' and 'Y', increase its value by '1', and decrease the value of the other integer by '2'.



Return '1' if Alice can make both integers equal after performing some operations. Otherwise, return '0'.



Example:
X = 7
Y = 13

In the first operation, Alice will choose 'X'. So after performing an operation, 'X' and 'Y' will be '8' and '11', respectively.
In the second operation, Alice will again choose 'X'. So after performing an operation, 'X' and 'Y' will be '9' and '9', respectively.

After performing two operations, we see that 'X' and 'Y' are equal.
So the answer for this case is '1'.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= 'X' <= 10^9
1 <= 'Y' <= 10^9
Time limit: 1 sec
Sample input 1:
2
4 4
2 5
Sample output 1:
1
1
Explanation of sample input 1:
For test case 1:
We can see that 'X' and 'Y' are already equal.
So, the answer for this case is '1'.

For test case 2:
In the first operation, Alice will choose 'X'. So after performing an operation, both 'X' and 'Y' will be '3'. We see that 'X' and 'Y' are equal.
Hence, the answer for this case is '1'.
Sample input 2:
2
1 4
1 5
Sample output 2:
1
0
